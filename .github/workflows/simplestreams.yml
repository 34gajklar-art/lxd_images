name: Simplestreams

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 安装依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip curl

      - name: 获取所有 Releases 信息
        id: get_releases
        run: |
          curl -s "https://api.github.com/repos/${{ github.repository }}/releases" > releases.json
          echo "data=$(cat releases.json | jq -c .)" >> $GITHUB_OUTPUT

      - name: 创建或获取 processed Release ID
        id: get_processed_release
        run: |
          existing_release=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases" | jq -r '.[] | select(.tag_name=="processed") | .id // empty')
          if [ -z "$existing_release" ]; then
            release_response=$(curl -s -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{"tag_name":"processed","name":"Processed Assets","draft":false,"prerelease":false}' \
              "https://api.github.com/repos/${{ github.repository }}/releases")
            processed_id=$(echo "$release_response" | jq -r '.id')
            if [ "$processed_id" = "null" ] || [ -z "$processed_id" ]; then
              echo "Failed to create release"
              echo "$release_response"
              exit 1
            fi
          else
            processed_id=$existing_release
          fi
          echo "release_id=$processed_id" >> $GITHUB_OUTPUT

      - name: 预处理和删除现有文件
        env:
          PROCESSED_RELEASE_ID: ${{ steps.get_processed_release.outputs.release_id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          mkdir -p work
          cd work
          echo "[]" > files_to_upload.json
          cat ../releases.json | jq -r '
            .[] |
            select(.tag_name != "processed") |
            .assets[] |
            select(.name | test("^[a-z0-9]+_[0-9a-z.\\-]+_[a-z0-9]+_[a-z0-9]+_[a-z]+\\.zip$")) |
            @base64
          ' > assets_to_process.txt
          existing_assets=$(curl -s "https://api.github.com/repos/$REPO/releases/$PROCESSED_RELEASE_ID/assets")
          while IFS= read -r encoded_asset; do
            [ -z "$encoded_asset" ] && continue
            asset=$(echo "$encoded_asset" | base64 -d)
            name=$(echo "$asset" | jq -r '.name')
            url=$(echo "$asset" | jq -r '.browser_download_url')
            echo "Processing $name"
            if [[ "$name" =~ ^([a-z0-9]+)_([0-9a-z\.\-]+)_([a-z0-9]+)_([a-z0-9]+)_([a-z]+)\.zip$ ]]; then
              os="${BASH_REMATCH[1]}"
              version="${BASH_REMATCH[2]}"
              codename="${BASH_REMATCH[3]}"
              arch="${BASH_REMATCH[4]}"
              variant="${BASH_REMATCH[5]}"
              rootfs_file="${os}-${version}-${arch}-${variant}-rootfs.squashfs"
              lxd_file="${os}-${version}-${arch}-${variant}-lxd.tar.xz"
              rootfs_asset_id=$(echo "$existing_assets" | jq -r --arg name "$rootfs_file" '.[] | select(.name == $name) | .id // empty')
              lxd_asset_id=$(echo "$existing_assets" | jq -r --arg name "$lxd_file" '.[] | select(.name == $name) | .id // empty')
              if [ -n "$rootfs_asset_id" ]; then
                sleep 1
                curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$REPO/releases/assets/$rootfs_asset_id"
              fi
              if [ -n "$lxd_asset_id" ]; then
                curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$REPO/releases/assets/$lxd_asset_id"
              fi
              sleep 1
              jq --arg name "$name" \
                 --arg url "$url" \
                 --arg os "$os" \
                 --arg version "$version" \
                 --arg arch "$arch" \
                 --arg variant "$variant" \
                 --arg codename "$codename" \
                 --arg rootfs_file "$rootfs_file" \
                 --arg lxd_file "$lxd_file" \
                 '. += [{
                   name: $name,
                   url: $url,
                   os: $os,
                   version: $version,
                   arch: $arch,
                   variant: $variant,
                   codename: $codename,
                   rootfs_file: $rootfs_file,
                   lxd_file: $lxd_file
                 }]' files_to_upload.json > files_to_upload_temp.json
              mv files_to_upload_temp.json files_to_upload.json
            fi
          done < assets_to_process.txt
          mv files_to_upload.json /tmp/files_to_upload.json

      - name: 等待API同步
        run: |
          sleep 60

      - name: 处理并上传解压文件
        env:
          PROCESSED_RELEASE_ID: ${{ steps.get_processed_release.outputs.release_id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          mkdir -p work
          cd work
          echo "[]" > processed_assets.json
          jq -r '.[] | @base64' /tmp/files_to_upload.json | while IFS= read -r encoded_file; do
            [ -z "$encoded_file" ] && continue
            file_info=$(echo "$encoded_file" | base64 -d)
            name=$(echo "$file_info" | jq -r '.name')
            url=$(echo "$file_info" | jq -r '.url')
            os=$(echo "$file_info" | jq -r '.os')
            version=$(echo "$file_info" | jq -r '.version')
            arch=$(echo "$file_info" | jq -r '.arch')
            variant=$(echo "$file_info" | jq -r '.variant')
            codename=$(echo "$file_info" | jq -r '.codename')
            rootfs_file=$(echo "$file_info" | jq -r '.rootfs_file')
            lxd_file=$(echo "$file_info" | jq -r '.lxd_file')
            temp_dir="temp_${os}_${version}_${arch}_${variant}_$$"
            mkdir -p "$temp_dir"
            cd "$temp_dir"
            if curl --retry 3 --retry-delay 5 -L -o image.zip "$url" && unzip -q image.zip; then
              if [ -f rootfs.squashfs ] && [ -f lxd.tar.xz ]; then
                mv rootfs.squashfs "$rootfs_file"
                mv lxd.tar.xz "$lxd_file"
                rootfs_sha=$(sha256sum "$rootfs_file" | cut -d ' ' -f1)
                lxd_sha=$(sha256sum "$lxd_file" | cut -d ' ' -f1)
                rootfs_size=$(stat -c%s "$rootfs_file")
                lxd_size=$(stat -c%s "$lxd_file")
                echo "Uploading $rootfs_file..."
                rootfs_response=$(curl -s -X POST \
                  -H "Authorization: token $GITHUB_TOKEN" \
                  -H "Content-Type: application/octet-stream" \
                  --data-binary @"$rootfs_file" \
                  "https://uploads.github.com/repos/$REPO/releases/$PROCESSED_RELEASE_ID/assets?name=$rootfs_file")
                echo "Uploading $lxd_file..."
                lxd_response=$(curl -s -X POST \
                  -H "Authorization: token $GITHUB_TOKEN" \
                  -H "Content-Type: application/octet-stream" \
                  --data-binary @"$lxd_file" \
                  "https://uploads.github.com/repos/$REPO/releases/$PROCESSED_RELEASE_ID/assets?name=$lxd_file")
                rootfs_url=$(echo "$rootfs_response" | jq -r '.browser_download_url // empty')
                lxd_url=$(echo "$lxd_response" | jq -r '.browser_download_url // empty')
                if [ -n "$rootfs_url" ] && [ -n "$lxd_url" ]; then
                  jq --arg os "$os" \
                     --arg version "$version" \
                     --arg arch "$arch" \
                     --arg variant "$variant" \
                     --arg codename "$codename" \
                     --arg rootfs_url "$rootfs_url" \
                     --arg lxd_url "$lxd_url" \
                     --arg rootfs_sha "$rootfs_sha" \
                     --arg lxd_sha "$lxd_sha" \
                     --arg rootfs_size "$rootfs_size" \
                     --arg lxd_size "$lxd_size" \
                     '. += [{
                       os: $os,
                       version: $version,
                       arch: $arch,
                       variant: $variant,
                       codename: $codename,
                       rootfs_url: $rootfs_url,
                       lxd_url: $lxd_url,
                       rootfs_sha256: $rootfs_sha,
                       lxd_sha256: $lxd_sha,
                       rootfs_size: ($rootfs_size | tonumber),
                       lxd_size: ($lxd_size | tonumber)
                     }]' ../processed_assets.json > ../processed_assets_temp.json
                  mv ../processed_assets_temp.json ../processed_assets.json
                else
                  echo "Failed to upload files for $name"
                  echo "Rootfs response: $rootfs_response"
                  echo "LXD response: $lxd_response"
                fi
              else
                echo "Missing required files in $name"
              fi
            else
              echo "Failed to download or extract $name"
            fi
            cd ..
            rm -rf "$temp_dir"
          done
          mv processed_assets.json /tmp/processed_assets.json

      - name: 生成 Simplestreams JSON
        env:
          PROCESSED_RELEASE_ID: ${{ steps.get_processed_release.outputs.release_id }}
          REPO: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p pages/streams/v1
          assets_json=$(curl -s "https://api.github.com/repos/$REPO/releases/$PROCESSED_RELEASE_ID/assets?per_page=100")
          echo "$assets_json" | jq -c '.[] | select(.name | endswith("rootfs.squashfs")) | {name: .name, url: .browser_download_url, size: .size}' > rootfs_list.json
          echo "$assets_json" | jq -r '.[] | "\(.name) \(.size)"' > asset_sizes.txt
          echo "[]" > product_objs.jsonl
          new_list=$(cat /tmp/processed_assets.json | jq -c '.[]')
          while IFS= read -r rootfs_entry; do
            [ -z "$rootfs_entry" ] && continue
            name=$(echo "$rootfs_entry" | jq -r '.name')
            url=$(echo "$rootfs_entry" | jq -r '.url')
            size=$(echo "$rootfs_entry" | jq -r '.size')
            if [[ "$name" =~ ^([a-z0-9]+)-([0-9a-z\.\-]+)-([a-z0-9]+)-([a-z0-9]+)-rootfs\.squashfs$ ]]; then
              os="${BASH_REMATCH[1]}"
              version="${BASH_REMATCH[2]}"
              arch="${BASH_REMATCH[3]}"
              variant="${BASH_REMATCH[4]}"
            else
              continue
            fi
            lxd_name="${os}-${version}-${arch}-${variant}-lxd.tar.xz"
            lxd_size=$(grep -F "$lxd_name" asset_sizes.txt | awk '{print $2}')
            lxd_size=${lxd_size:-0}
            new_info=$(echo "$new_list" | jq -c --arg file "$name" 'select(.rootfs_url and .rootfs_file == $file)')
            rootfs_sha=""
            lxd_sha=""
            codename=""
            if [ -n "$new_info" ]; then
              rootfs_sha=$(echo "$new_info" | jq -r '.rootfs_sha256')
              lxd_sha=$(echo "$new_info" | jq -r '.lxd_sha256')
              codename=$(echo "$new_info" | jq -r '.codename')
            else
              rootfs_sha=$(curl -sL "$url" | sha256sum | cut -d ' ' -f1)
              lxd_url="https://github.com/$REPO/releases/download/processed/$lxd_name"
              lxd_sha=$(curl -sL "$lxd_url" | sha256sum | cut -d ' ' -f1)
            fi
            content_id_prefix="net.spiritlhl.lxdimages"
            base_variant="false"
            if [ "$variant" = "cloud" ]; then
              base_variant="true"
            elif [ "$variant" = "default" ]; then
              if ! grep -q "\"name\": \"${os}-${version}-${arch}-cloud-rootfs.squashfs\"" rootfs_list.json; then
                base_variant="true"
              fi
            fi
            similar_count=$(grep -F "\"name\": \"${os}-${version}-${arch}-" rootfs_list.json | wc -l)
            if [ "$similar_count" -eq 1 ]; then
              base_variant="true"
            fi
            product_name="${os}:${version}:${arch}"
            if [ "$base_variant" != "true" ]; then
              product_name="${product_name}:${variant}"
            fi
            product_key="${content_id_prefix}:${product_name}"
            # Create items JSON
            rootfs_item=$(jq -n --arg ftype "squashfs" --arg path "$name" --arg sha "$rootfs_sha" --arg size_str "$size" '{ftype:$ftype, path:$path, sha256:$sha, size: ($size_str|tonumber)}')
            lxd_item=$(jq -n --arg ftype "lxd.tar.xz" --arg path "$lxd_name" --arg sha "$lxd_sha" --arg size_str "$lxd_size" '{ftype:$ftype, path:$path, sha256:$sha, size: ($size_str|tonumber)}')
            rootfs_item=$(echo "$rootfs_item" | jq --arg mirror "https://github.com/$REPO/releases/download/processed" '. + {mirrors: [$mirror]}')
            lxd_item=$(echo "$lxd_item" | jq --arg mirror "https://github.com/$REPO/releases/download/processed" '. + {mirrors: [$mirror]}')
            product_obj=$(jq -n \
              --arg os "$os" \
              --arg arch "$arch" \
              --arg version "$version" \
              --arg codename "$codename" \
              '{
                 aliases: ($codename | select(. != "") // empty),
                 os: $os,
                 arch: $arch,
                 release: ($codename | select(. != "") // empty),
                 release_codename: ($codename | select(. != "") // empty),
                 release_title: $version,
                 supported: true,
                 version: $version,
                 versions: {}
               }')
            serial=$(date -u +%Y%m%d%H%M%S)
            product_obj=$(echo "$product_obj" | jq --arg serial "$serial" --argjson rItem "$rootfs_item" --argjson lItem "$lxd_item" '.versions += {($serial): {items: {"root.squashfs": $rItem, "lxd.tar.xz": $lItem}}}')
            echo "$(jq -n --arg key "$product_key" --argjson val "$product_obj" '{($key): $val}')" >> product_objs.jsonl
          done < rootfs_list.json
          jq -s 'reduce .[] as $item ({}; . * $item)' product_objs.jsonl > products_obj.json
          now=$(LC_ALL=C date -u +"%a, %d %b %Y %H:%M:%S +0000")
          content_id="${content_id_prefix}:download"
          jq -n --arg content_id "$content_id" --arg updated "$now" --argjson products "$(cat products_obj.json)" '{
               content_id: $content_id,
               datatype: "image-downloads",
               format: "products:1.0",
               products: $products,
               updated: $updated
             }' > pages/streams/v1/download.json
          products_keys=$(jq -r 'keys' products_obj.json)
          jq -n --arg content_id "$content_id" --arg updated_idx "$now" --arg updated_prod "$now" --arg path "streams/v1/download.json" --argjson prod_list "$products_keys" '{
               index: {
                 ($content_id): {
                   datatype: "image-downloads",
                   path: $path,
                   updated: $updated_prod,
                   products: $prod_list,
                   format: "products:1.0"
                 }
               },
               updated: $updated_idx,
               format: "index:1.0"
             }' > pages/streams/v1/index.json

      - name: 生成网页界面
        run: |
          cat > pages/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="zh-CN">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>LXD Images Repository</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
                  h1 { color: #333; border-bottom: 2px solid #ddd; padding-bottom: 10px; }
                  h2 { color: #666; margin-top: 30px; }
                  .container { max-width: 1200px; margin: 0 auto; }
                  .image-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); gap: 20px; margin: 20px 0; }
                  .image-card { border: 1px solid #ddd; padding: 15px; border-radius: 5px; }
                  .image-card h3 { margin-top: 0; color: #333; }
                  .version-list { margin: 10px 0; }
                  .version-item { margin: 5px 0; padding: 10px; background: #f5f5f5; border-radius: 3px; }
                  .arch-item { margin: 8px 0; padding: 8px; background: #fff; border: 1px solid #e0e0e0; border-radius: 3px; }
                  .download-links { margin: 5px 0; }
                  .download-links a { margin-right: 10px; padding: 4px 8px; background: #007cba; color: white; text-decoration: none; border-radius: 3px; font-size: 12px; }
                  .download-links a:hover { background: #005a8b; }
                  .variants { margin-top: 8px; font-size: 12px; }
                  .variants .variant-item { margin: 4px 0; padding: 4px 8px; background: #e8f4f8; border-radius: 2px; }
                  .usage-section { background: #f9f9f9; padding: 20px; border-radius: 5px; margin: 20px 0; }
                  .usage-examples { background: #fff; padding: 15px; border-radius: 3px; margin: 10px 0; }
                  pre { background: #f4f4f4; padding: 10px; border-radius: 3px; overflow-x: auto; font-size: 14px; }
                  .note { background: #fffbf0; padding: 10px; border-left: 4px solid #ffa500; margin: 10px 0; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>LXD Images Repository</h1>
                  <p>本仓库提供各种 Linux 发行版的 LXD 容器镜像。</p>
                  <div class="usage-section">
                      <h2>使用方法</h2>
                      <p>添加此镜像源到您的 LXD 配置：</p>
                      <pre>lxc remote add spiritlhl-images http://lxdimages.spiritlhl.net --protocol=simplestreams --public</pre>
                      <div class="usage-examples">
                          <p><strong>基本使用（使用默认变体）：</strong></p>
                          <pre>lxc launch spiritlhl-images:debian/11 my-container</pre>
                          <p><strong>指定架构：</strong></p>
                          <pre>lxc launch spiritlhl-images:debian/11/arm64 my-arm-container</pre>
                          <p><strong>指定特定变体：</strong></p>
                          <pre>lxc launch spiritlhl-images:debian/11/amd64/default my-default-container</pre>
                      </div>
                      <div class="note">
                          <strong>注意：</strong> 如果存在多个变体，默认会使用 cloud 变体。如需使用其他变体，请在命令中明确指定。
                      </div>
                      <p>列出可用镜像：</p>
                      <pre>lxc image list spiritlhl-images:</pre>
                  </div>
                  <h2>可用镜像</h2>
                  <div id="images-container">
                      <p>加载中...</p>
                  </div>
              </div>
              <script>
                  async function loadImages() {
                      try {
                          const response = await fetch('./streams/v1/download.json');
                          if (!response.ok) {
                              throw new Error(`HTTP error! status: ${response.status}`);
                          }
                          const data = await response.json();
                          console.log('Loaded data:', data);
                          displayImages(data.products);
                      } catch (error) {
                          console.error('Error loading images:', error);
                          document.getElementById('images-container').innerHTML = '<p>加载镜像列表失败: ' + error.message + '</p>';
                      }
                  }
                  function displayImages(products) {
                      const container = document.getElementById('images-container');
                      if (!products || Object.keys(products).length === 0) {
                          container.innerHTML = '<p>暂无可用镜像</p>';
                          return;
                      }
                      const imageCards = Object.entries(products).map(([productKey, product]) => {
                          let usagePath = '';
                          if (product.arch === 'amd64' && product.variant === 'cloud') {
                              usagePath = `${product.os}/${product.version}`;
                          } else if (!product.variant || product.variant === 'cloud') {
                              usagePath = `${product.os}/${product.version}/${product.arch}`;
                          } else {
                              usagePath = `${product.os}/${product.version}/${product.arch}/${product.variant}`;
                          }
                          const buildsHtml = Object.entries(product.versions).map(([serial, serialData]) => {
                              const rootfsItem = serialData.items['root.squashfs'];
                              const lxdItem = serialData.items['lxd.tar.xz'];
                              const mirrorBase = rootfsItem.mirrors && rootfsItem.mirrors.length > 0 ? rootfsItem.mirrors[0] : '';
                              const rootfsLink = mirrorBase ? mirrorBase + '/' + rootfsItem.path : rootfsItem.path;
                              const lxdLink = mirrorBase ? mirrorBase + '/' + lxdItem.path : lxdItem.path;
                              return `
                                  <div class="version-item">
                                      <strong>构建: ${serial}</strong>
                                      <div class="arch-item">
                                          <strong>${product.arch}</strong>${product.variant && product.variant !== 'cloud' ? ' (' + product.variant + ')' : ' (默认变体)'}
                                          <div class="download-links">
                                              <a href="${rootfsLink}" download>rootfs</a>
                                              <a href="${lxdLink}" download>metadata</a>
                                          </div>
                                      </div>
                                  </div>
                              `;
                          }).join('');
                          return `
                              <div class="image-card">
                                  <h3>${product.os} ${product.version}</h3>
                                  <p>使用方式: <code>lxc launch spiritlhl-images:${usagePath} container-name</code></p>
                                  <div class="version-list">
                                      ${buildsHtml}
                                  </div>
                              </div>
                          `;
                      }).join('');
                      container.innerHTML = `<div class="image-grid">${imageCards}</div>`;
                  }
                  document.addEventListener('DOMContentLoaded', loadImages);
              </script>
          </body>
          </html>
          EOF
          echo "lxdimages.spiritlhl.net" > pages/CNAME

      - name: 部署 GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./pages
          publish_branch: gh-pages
          force_orphan: true
