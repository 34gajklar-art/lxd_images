name: Build and Deploy Simplestreams

on:
  workflow_dispatch:

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests PyGithub

    - name: Get release assets
      id: get_assets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        import os, requests, json, datetime
        from github import Github

        g = Github(os.environ['GITHUB_TOKEN'])
        repo = g.get_repo("oneclickvirt/lxd_images")
        release = repo.get_release("processed")
        assets = release.get_assets()

        asset_data = []
        for asset in assets:
          if asset.name.endswith('.json'):
            asset_info = {
              "name": asset.name,
              "url": asset.browser_download_url,
              "size": asset.size
            }
            asset_data.append(asset_info)

        with open('assets.json', 'w') as f:
          json.dump(asset_data, f)

        print(f"::set-output name=asset_count::{len(asset_data)}")
      shell: python

    - name: Process metadata
      run: |
        import json, os

        with open('assets.json') as f:
          assets = json.load(f)

        products = {}
        for asset in assets:
          resp = requests.get(asset['url'])
          data = resp.json()
          os_name = data['properties']['os'].lower()
          release = data['properties']['release']
          arch = data['architecture']
          creation_date = data['creation_date']
          date_str = datetime.datetime.utcfromtimestamp(creation_date).strftime('%Y%m%d')
          product_key = f"{os_name}:{release}:{arch}"

          if product_key not in products:
            products[product_key] = {
              "arch": arch,
              "os": os_name,
              "release": release,
              "release_title": release,
              "versions": {}
            }

          version_data = {"items": {}}
          for ftype in ['rootfs.tar.xz', 'lxd.tar.xz']:
            fname = f"{asset['name'].replace('.json', '')}/{ftype}"
            version_data["items"][ftype] = {
              "ftype": ftype,
              "hash": f"sha256:{data['fingerprint']}",
              "path": fname,
              "size": data['size']
            }

          products[product_key]["versions"][date_str] = version_data

        images_json = {
          "content_id": "images",
          "datatype": "image-downloads",
          "format": "products:1.0",
          "products": products
        }

        index_json = {
          "index": {
            "images": {
              "datatype": "image-downloads",
              "path": "streams/v1/images.json",
              "products": list(products.keys())
            }
          },
          "format": "index:1.0"
        }

        os.makedirs('streams/v1', exist_ok=True)
        with open('streams/v1/images.json', 'w') as f:
          json.dump(images_json, f, indent=2)
        with open('streams/v1/index.json', 'w') as f:
          json.dump(index_json, f, indent=2)

        with open('CNAME', 'w') as f:
          f.write('lxdimages.spiritlhl.net')

        html_content = """
        <!DOCTYPE html>
        <html>
        <head>
          <title>LXD Image Repository</title>
          <style>
            body { font-family: sans-serif; margin: 20px; }
            table { border-collapse: collapse; width: 100%; }
            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
            th { background-color: #f2f2f2; }
          </style>
        </head>
        <body>
          <h1>Available LXD Images</h1>
          <table>
            <tr><th>OS</th><th>Release</th><th>Architecture</th><th>Version</th></tr>
        """
        for pkey, pdata in products.items():
          os_name, release, arch = pkey.split(':')
          for version in pdata['versions']:
            html_content += f"<tr><td>{os_name}</td><td>{release}</td><td>{arch}</td><td>{version}</td></tr>"
        html_content += """
          </table>
          <p>Simplestreams URL: https://lxdimages.spiritlhl.net/streams/v1</p>
        </body>
        </html>
        """
        with open('index.html', 'w') as f:
          f.write(html_content)
      shell: python
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./
        force_orphan: true
        keep_files: false
