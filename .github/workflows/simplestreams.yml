name: Build and Deploy SimpleStreams Index to Netlify

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:
  push:
    branches:
      - main
  release:
    types: [published]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install requests jinja2 pyyaml
          
      - name: Generate SimpleStreams index and redirects
        run: |
          python3 << 'EOF'
          import requests
          import json
          import hashlib
          import os
          from datetime import datetime, timezone
          import time
          
          GITHUB_TOKEN = os.environ.get('GITHUB_TOKEN', '')
          REPO = 'oneclickvirt/lxd_images'
          TAG = 'processed'
          BASE_URL = f'https://github.com/{REPO}/releases/download/{TAG}'
          
          headers = {}
          if GITHUB_TOKEN:
              headers['Authorization'] = f'token {GITHUB_TOKEN}'
              headers['Accept'] = 'application/vnd.github.v3+json'
              
          response = requests.get(f'https://api.github.com/repos/{REPO}/releases/tags/{TAG}', headers=headers)
          if response.status_code != 200:
              print(f"Error fetching release: {response.status_code}")
              print(response.text)
              exit(1)
              
          release_data = response.json()
          assets = release_data.get('assets', [])
          
          def parse_filename(filename):
              # 解析文件名格式: debian-11-amd64-cloud-lxd.tar.xz
              if filename.endswith('-lxd.tar.xz'):
                  base_name = filename.replace('-lxd.tar.xz', '')
              elif filename.endswith('-rootfs.squashfs'):
                  base_name = filename.replace('-rootfs.squashfs', '')
              else:
                  return None, None, None, None
              
              parts = base_name.split('-')
              if len(parts) >= 4:
                  distro = parts[0]
                  version = parts[1]
                  arch = parts[2]
                  variant = parts[3]  # cloud, default, openrc, systemd etc.
                  return distro, version, arch, variant
              return None, None, None, None
          
          def calculate_sha256_from_url(url):
              try:
                  print(f"Calculating SHA256 for: {url}")
                  response = requests.get(url, stream=True, timeout=60)
                  if response.status_code == 200:
                      sha256_hash = hashlib.sha256()
                      for chunk in response.iter_content(chunk_size=8192):
                          if chunk:
                              sha256_hash.update(chunk)
                      result = sha256_hash.hexdigest()
                      print(f"SHA256: {result}")
                      return result
                  else:
                      print(f"Failed to download file for SHA256: {response.status_code}")
              except Exception as e:
                  print(f"Error calculating SHA256: {e}")
              
              # 返回占位符，但这会影响验证
              return "0000000000000000000000000000000000000000000000000000000000000000"
          
          def get_file_info(asset, file_type):
              return {
                  'ftype': file_type,
                  'size': asset.get('size', 0),
                  'path': f'download/{asset["name"]}',
                  'sha256': calculate_sha256_from_url(f'{BASE_URL}/{asset["name"]}')
              }
          
          # 存储重定向规则
          redirects_rules = []
          
          products = {}
          
          lxd_files = [asset for asset in assets if asset['name'].endswith('-lxd.tar.xz')]
          rootfs_files = [asset for asset in assets if asset['name'].endswith('-rootfs.squashfs')]
          
          current_time = datetime.now(timezone.utc)
          version_id = current_time.strftime('%Y%m%d_%H%M')
          
          print(f"Found {len(lxd_files)} LXD files and {len(rootfs_files)} rootfs files")
          
          for lxd_asset in lxd_files:
              distro, version, arch, variant = parse_filename(lxd_asset['name'])
              if not distro:
                  print(f"Could not parse filename: {lxd_asset['name']}")
                  continue
                  
              # 查找对应的rootfs文件
              rootfs_name = lxd_asset['name'].replace('-lxd.tar.xz', '-rootfs.squashfs')
              rootfs_asset = next((a for a in rootfs_files if a['name'] == rootfs_name), None)
              
              if not rootfs_asset:
                  print(f"Could not find rootfs for: {lxd_asset['name']}")
                  continue
              
              # 添加重定向规则
              redirects_rules.append(f'/download/{lxd_asset["name"]} {BASE_URL}/{lxd_asset["name"]} 302')
              redirects_rules.append(f'/download/{rootfs_asset["name"]} {BASE_URL}/{rootfs_asset["name"]} 302')
              
              # 生成产品名称 - 使用正确的格式
              product_name = f'{distro}:{version}:{arch}:{variant}'
              
              # 生成别名数组（不是字符串）
              aliases = []
              
              # 基本别名格式
              aliases.append({'name': f'{distro}/{version}', 'description': f'{distro.title()} {version}'})
              aliases.append({'name': f'{distro}/{version}/{arch}', 'description': f'{distro.title()} {version} {arch}'})
              
              # 带变体的别名
              if variant != 'default':
                  aliases.append({'name': f'{distro}/{version}/{arch}/{variant}', 'description': f'{distro.title()} {version} {arch} ({variant})'})
              
              # 向后兼容的冒号格式
              aliases.append({'name': f'{distro}:{version}:{arch}', 'description': f'{distro.title()} {version} {arch}'})
              
              # 如果版本是 current，添加简化别名
              if version == 'current':
                  aliases.append({'name': f'{distro}', 'description': f'{distro.title()} latest'})
                  aliases.append({'name': f'{distro}/{arch}', 'description': f'{distro.title()} latest {arch}'})
              
              if product_name not in products:
                  products[product_name] = {
                      'aliases': aliases,
                      'arch': arch,
                      'os': distro,
                      'release': version,
                      'variant': variant,
                      'versions': {}
                  }
              
              # 版本信息
              products[product_name]['versions'][version_id] = {
                  'items': {
                      'lxd.tar.xz': get_file_info(lxd_asset, 'lxd.tar.xz'),
                      'rootfs.squashfs': get_file_info(rootfs_asset, 'squashfs')
                  }
              }
              
              print(f"Processed {product_name}")
          
          update_time = current_time.strftime('%a, %d %b %Y %H:%M:%S +0000')
          
          # 正确的SimpleStreams索引数据结构
          index_data = {
              'format': 'index:1.0',
              'index': {
                  'images': {
                      'datatype': 'image-downloads',
                      'path': 'streams/v1/images.json',
                      'updated': update_time,
                      'products': list(products.keys()),
                      'format': 'products:1.0'
                  }
              },
              'updated': update_time
          }
          
          images_data = {
              'content_id': 'images',
              'datatype': 'image-downloads',
              'format': 'products:1.0',
              'license': 'https://www.canonical.com/licencing/ubuntu',
              'products': products,
              'updated': update_time
          }
          
          os.makedirs('build/streams/v1', exist_ok=True)
          
          with open('build/streams/v1/index.json', 'w') as f:
              json.dump(index_data, f, indent=2, separators=(',', ': '))
              
          with open('build/streams/v1/images.json', 'w') as f:
              json.dump(images_data, f, indent=2, separators=(',', ': '))
          
          # 生成 Netlify _redirects 文件
          with open('build/_redirects', 'w') as f:
              for rule in redirects_rules:
                  f.write(rule + '\n')
              # 重要：添加CORS支持的重定向
              f.write('/streams/v1/* /streams/v1/:splat 200\n')
              f.write('/* /index.html 200\n')
          
          print(f"Generated index with {len(products)} products and {len(redirects_rules)} redirect rules")
          
          # 验证生成的文件
          with open('build/streams/v1/index.json', 'r') as f:
              test_index = json.load(f)
              print("Index JSON validation passed")
              
          with open('build/streams/v1/images.json', 'r') as f:
              test_images = json.load(f)
              print("Images JSON validation passed")
          
          # 生成调试信息
          print("\n=== 生成的产品别名 ===")
          for product_name, product_info in sorted(products.items()):
              print(f"产品: {product_name}")
              for alias in product_info['aliases']:
                  print(f"  别名: {alias['name']} - {alias['description']}")
              print()
          
          EOF
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Generate HTML frontend
        run: |
          python3 << 'EOF'
          import json
          import os
          from datetime import datetime
          
          with open('build/streams/v1/images.json', 'r') as f:
              images_data = json.load(f)
          
          html_content = """<!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>LXD Images Repository</title>
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                      max-width: 1200px;
                      margin: 0 auto;
                      padding: 20px;
                      line-height: 1.6;
                      color: #333;
                  }
                  h1 { color: #2c3e50; margin-bottom: 10px; }
                  .subtitle { color: #7f8c8d; margin-bottom: 30px; }
                  .usage {
                      background: #f8f9fa;
                      padding: 20px;
                      border-radius: 8px;
                      margin: 20px 0;
                      border-left: 4px solid #3498db;
                  }
                  pre {
                      background: #2c3e50;
                      color: #ecf0f1;
                      padding: 15px;
                      border-radius: 5px;
                      overflow-x: auto;
                      margin: 10px 0;
                  }
                  .images {
                      margin-top: 30px;
                  }
                  .os-section {
                      margin-bottom: 40px;
                      border: 1px solid #dee2e6;
                      border-radius: 8px;
                      overflow: hidden;
                  }
                  .os-header {
                      background: #495057;
                      color: white;
                      padding: 20px;
                      font-size: 1.5em;
                      font-weight: bold;
                  }
                  .version-group {
                      border-bottom: 1px solid #dee2e6;
                  }
                  .version-header {
                      background: #6c757d;
                      color: white;
                      padding: 15px 20px;
                      font-weight: bold;
                  }
                  .image-item {
                      padding: 15px 20px;
                      border-bottom: 1px solid #f1f3f4;
                  }
                  .image-item:last-child {
                      border-bottom: none;
                  }
                  .image-details {
                      display: flex;
                      justify-content: space-between;
                      align-items: center;
                      flex-wrap: wrap;
                  }
                  .image-info {
                      flex: 1;
                      min-width: 200px;
                  }
                  .image-cmd {
                      font-family: 'Monaco', 'Menlo', monospace;
                      background: #f8f9fa;
                      padding: 10px;
                      border-radius: 4px;
                      border-left: 4px solid #28a745;
                      margin-top: 10px;
                      font-size: 0.9em;
                  }
                  .variant-badge {
                      display: inline-block;
                      padding: 4px 8px;
                      border-radius: 12px;
                      font-size: 0.8em;
                      font-weight: bold;
                      text-transform: uppercase;
                  }
                  .variant-cloud { background: #d4edda; color: #155724; }
                  .variant-default { background: #cce5ff; color: #004085; }
                  .variant-openrc { background: #f8d7da; color: #721c24; }
                  .variant-systemd { background: #fff3cd; color: #856404; }
                  .arch-badge {
                      background: #e9ecef;
                      color: #495057;
                      padding: 2px 6px;
                      border-radius: 8px;
                      font-size: 0.8em;
                      margin-left: 10px;
                  }
                  .stats {
                      display: flex;
                      gap: 20px;
                      margin: 20px 0;
                      flex-wrap: wrap;
                  }
                  .stat-item {
                      background: #f8f9fa;
                      padding: 15px;
                      border-radius: 8px;
                      text-align: center;
                      min-width: 100px;
                  }
                  .stat-number {
                      font-size: 2em;
                      font-weight: bold;
                      color: #3498db;
                  }
                  .stat-label {
                      color: #6c757d;
                      font-size: 0.9em;
                  }
              </style>
          </head>
          <body>
              <h1>🐧 LXD Images Repository</h1>
              <p class="subtitle">高质量的LXD容器镜像集合 - 支持多架构、多变体</p>
              <p><strong>最后更新:</strong> """ + datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC') + """</p>
              
              <div class="usage">
                  <h2>📋 使用方法</h2>
                  <p><strong>1. 添加镜像源到LXD:</strong></p>
                  <pre>lxc remote add spiritlhl https://lxdimages.spiritlhl.net --protocol simplestreams --public</pre>
                  <p><strong>2. 启动容器:</strong></p>
                  <pre>lxc launch spiritlhl:debian/12 my-container
          lxc launch spiritlhl:debian/12/amd64 my-container  
          lxc launch spiritlhl:ubuntu/24.04 my-container</pre>
                  <p><strong>3. 查看可用镜像:</strong></p>
                  <pre>lxc image list spiritlhl:</pre>
              </div>
          """
          
          # 统计信息
          total_images = len(images_data['products'])
          os_list = set()
          arch_list = set()
          variant_list = set()
          
          for product_info in images_data['products'].values():
              os_list.add(product_info['os'])
              arch_list.add(product_info['arch'])
              variant_list.add(product_info['variant'])
          
          html_content += f"""
              <div class="stats">
                  <div class="stat-item">
                      <div class="stat-number">{total_images}</div>
                      <div class="stat-label">总镜像数</div>
                  </div>
                  <div class="stat-item">
                      <div class="stat-number">{len(os_list)}</div>
                      <div class="stat-label">操作系统</div>
                  </div>
                  <div class="stat-item">
                      <div class="stat-number">{len(arch_list)}</div>
                      <div class="stat-label">架构支持</div>
                  </div>
                  <div class="stat-item">
                      <div class="stat-number">{len(variant_list)}</div>
                      <div class="stat-label">变体类型</div>
                  </div>
              </div>
              
              <div class="images">
          """
          
          # 按操作系统分组
          grouped_by_os = {}
          for product_name, product_info in images_data['products'].items():
              os_name = product_info['os']
              if os_name not in grouped_by_os:
                  grouped_by_os[os_name] = {}
              
              version = product_info['release']
              if version not in grouped_by_os[os_name]:
                  grouped_by_os[os_name][version] = []
              
              grouped_by_os[os_name][version].append((product_name, product_info))
          
          for os_name in sorted(grouped_by_os.keys()):
              html_content += f"""
                  <div class="os-section">
                      <div class="os-header">{os_name.title()}</div>
              """
              
              for version in sorted(grouped_by_os[os_name].keys()):
                  html_content += f"""
                      <div class="version-group">
                          <div class="version-header">Version {version}</div>
                  """
                  
                  # 按架构和变体排序
                  items = sorted(grouped_by_os[os_name][version], key=lambda x: (x[1]['arch'], x[1]['variant']))
                  
                  for product_name, product_info in items:
                      arch = product_info['arch']
                      variant = product_info['variant']
                      
                      # 选择最佳别名
                      best_alias = f"{os_name}/{version}"
                      for alias in product_info.get('aliases', []):
                          alias_name = alias.get('name', '') if isinstance(alias, dict) else str(alias)
                          if '/' in alias_name and alias_name.count('/') == 1:
                              best_alias = alias_name
                              break
                      
                      html_content += f"""
                          <div class="image-item">
                              <div class="image-details">
                                  <div class="image-info">
                                      <strong>{os_name.title()} {version}</strong>
                                      <span class="arch-badge">{arch}</span>
                                      <span class="variant-badge variant-{variant}">{variant}</span>
                                  </div>
                              </div>
                              <div class="image-cmd">lxc launch spiritlhl:{best_alias} my-container</div>
                          </div>
                      """
                  
                  html_content += """
                      </div>
                  """
              
              html_content += """
                  </div>
              """
          
          html_content += """
              </div>
              
              <hr style="margin: 40px 0;">
              <p style="text-align: center;"><small>
                  <a href="streams/v1/index.json">SimpleStreams Index</a> | 
                  <a href="streams/v1/images.json">Images Metadata</a> |
                  <a href="https://github.com/oneclickvirt/lxd_images">GitHub Repository</a>
              </small></p>
          </body>
          </html>
          """
          
          with open('build/index.html', 'w', encoding='utf-8') as f:
              f.write(html_content)
          
          print("Generated enhanced HTML frontend")
          EOF
          
      - name: Create netlify.toml configuration
        run: |
          cat > build/netlify.toml << 'EOL'
          [build]
            publish = "."
          
          [build.environment]
            NODE_VERSION = "18"
          
          [[headers]]
            for = "/streams/v1/*"
            [headers.values]
              Content-Type = "application/json"
              Cache-Control = "public, max-age=300"
              Access-Control-Allow-Origin = "*"
              Access-Control-Allow-Methods = "GET, HEAD, OPTIONS"
              Access-Control-Allow-Headers = "Content-Type"
          
          [[headers]]
            for = "/download/*"
            [headers.values]
              Cache-Control = "no-cache"
          
          [[redirects]]
            from = "/simplestreams/data/*"
            to = "/streams/v1/:splat"
            status = 301
          EOL

      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: './build'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy SimpleStreams index with HTTP redirects"
          enable-pull-request-comment: false
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
