name: Simplestreams

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 安装依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip curl

      - name: 获取所有 Releases 信息
        run: |
          curl -s "https://api.github.com/repos/${{ github.repository }}/releases" -o releases.json

      - name: 创建或获取 processed Release ID
        id: get_processed_release
        run: |
          processed=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases" | jq -r '.[] | select(.tag_name=="processed") | .id')
          if [ -z "$processed" ]; then
            response=$(curl -s -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{"tag_name":"processed","name":"Processed Assets","draft":false,"prerelease":false}' \
              "https://api.github.com/repos/${{ github.repository }}/releases")
            processed=$(echo "$response" | jq -r '.id')
            if [ -z "$processed" ] || [ "$processed" = "null" ]; then
              echo "Failed to create release"; echo "$response"; exit 1
            fi
          fi
          echo "release_id=$processed" >> $GITHUB_OUTPUT

      - name: 预处理并删除现有文件
        env:
          PROCESSED_RELEASE_ID: ${{ steps.get_processed_release.outputs.release_id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          mkdir -p work && cd work
          echo "[]" > files_to_upload.json
          jq -r '.[] | select(.tag_name != "processed") | .assets[] | select(.name | test("^[a-z0-9]+_[0-9a-z.-]+_[a-z0-9]+_[a-z0-9]+_[a-z]+\\.zip$")) | @base64' ../releases.json > assets_to_process.txt
          existing_assets=$(curl -s "https://api.github.com/repos/$REPO/releases/$PROCESSED_RELEASE_ID/assets")
          while IFS= read -r encoded_asset; do
            [ -z "$encoded_asset" ] && continue
            asset=$(echo "$encoded_asset" | base64 -d)
            name=$(echo "$asset" | jq -r '.name')
            url=$(echo "$asset" | jq -r '.browser_download_url')
            if [[ "$name" =~ ^([a-z0-9]+)_([0-9a-z\.\-]+)_([a-z0-9]+)_([a-z0-9]+)_([a-z]+)\.zip$ ]]; then
              os="${BASH_REMATCH[1]}"
              version="${BASH_REMATCH[2]}"
              codename="${BASH_REMATCH[3]}"
              arch="${BASH_REMATCH[4]}"
              variant="${BASH_REMATCH[5]}"
              rootfs_file="${os}-${version}-${arch}-${variant}-rootfs.squashfs"
              lxd_file="${os}-${version}-${arch}-${variant}-lxd.tar.xz"
              rootfs_asset_id=$(echo "$existing_assets" | jq -r --arg name "$rootfs_file" '.[] | select(.name == $name) | .id')
              lxd_asset_id=$(echo "$existing_assets" | jq -r --arg name "$lxd_file" '.[] | select(.name == $name) | .id')
              if [ -n "$rootfs_asset_id" ]; then
                curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$REPO/releases/assets/$rootfs_asset_id"
                sleep 1
              fi
              if [ -n "$lxd_asset_id" ]; then
                curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$REPO/releases/assets/$lxd_asset_id"
                sleep 1
              fi
              jq --arg name "$name" \
                 --arg url "$url" \
                 --arg os "$os" \
                 --arg version "$version" \
                 --arg codename "$codename" \
                 --arg arch "$arch" \
                 --arg variant "$variant" \
                 --arg rootfs_file "$rootfs_file" \
                 --arg lxd_file "$lxd_file" \
                 '. += [{name: $name, url: $url, os: $os, version: $version, codename: $codename, arch: $arch, variant: $variant, rootfs_file: $rootfs_file, lxd_file: $lxd_file}]' files_to_upload.json > files_to_upload_temp.json
              mv files_to_upload_temp.json files_to_upload.json
            fi
          done
          mv files_to_upload.json /tmp/files_to_upload.json

      - name: 等待API同步
        run: sleep 60

      - name: 处理并上传解压文件
        env:
          PROCESSED_RELEASE_ID: ${{ steps.get_processed_release.outputs.release_id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          mkdir -p work && cd work
          echo "[]" > processed_assets.json
          jq -c '.[]' /tmp/files_to_upload.json | while IFS= read -r item; do
            name=$(echo "$item" | jq -r '.name')
            url=$(echo "$item" | jq -r '.url')
            os=$(echo "$item" | jq -r '.os')
            version=$(echo "$item" | jq -r '.version')
            codename=$(echo "$item" | jq -r '.codename')
            arch=$(echo "$item" | jq -r '.arch')
            variant=$(echo "$item" | jq -r '.variant')
            rootfs_file=$(echo "$item" | jq -r '.rootfs_file')
            lxd_file=$(echo "$item" | jq -r '.lxd_file')
            temp_dir="temp_${os}_${version}_${arch}_${variant}_$$"
            mkdir -p "$temp_dir"
            cd "$temp_dir"
            echo "Downloading $name..."
            if curl -L -o image.zip "$url" && unzip -q image.zip; then
              if [ -f rootfs.squashfs ] && [ -f lxd.tar.xz ]; then
                mv rootfs.squashfs "$rootfs_file"
                mv lxd.tar.xz "$lxd_file"
                rootfs_size=$(stat -c%s "$rootfs_file")
                lxd_size=$(stat -c%s "$lxd_file")
                rootfs_sha256=$(sha256sum "$rootfs_file" | cut -d ' ' -f1)
                lxd_sha256=$(sha256sum "$lxd_file" | cut -d ' ' -f1)
                rootfs_md5=$(md5sum "$rootfs_file" | cut -d ' ' -f1)
                lxd_md5=$(md5sum "$lxd_file" | cut -d ' ' -f1)
                echo "Uploading $rootfs_file..."
                rootfs_response=$(curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/octet-stream" --data-binary @"$rootfs_file" "https://uploads.github.com/repos/$REPO/releases/$PROCESSED_RELEASE_ID/assets?name=$rootfs_file")
                echo "Uploading $lxd_file..."
                lxd_response=$(curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/octet-stream" --data-binary @"$lxd_file" "https://uploads.github.com/repos/$REPO/releases/$PROCESSED_RELEASE_ID/assets?name=$lxd_file")
                rootfs_url=$(echo "$rootfs_response" | jq -r '.browser_download_url // empty')
                lxd_url=$(echo "$lxd_response" | jq -r '.browser_download_url // empty')
                if [ -n "$rootfs_url" ] && [ -n "$lxd_url" ]; then
                  jq --arg os "$os" \
                     --arg version "$version" \
                     --arg arch "$arch" \
                     --arg variant "$variant" \
                     --arg codename "$codename" \
                     --arg rootfs_url "$rootfs_url" \
                     --arg lxd_url "$lxd_url" \
                     --arg rootfs_size_str "$rootfs_size" \
                     --arg lxd_size_str "$lxd_size" \
                     --arg rootfs_sha256 "$rootfs_sha256" \
                     --arg lxd_sha256 "$lxd_sha256" \
                     --arg rootfs_md5 "$rootfs_md5" \
                     --arg lxd_md5 "$lxd_md5" \
                     '. += [{os: $os, version: $version, arch: $arch, variant: $variant, codename: $codename, rootfs_url: $rootfs_url, lxd_url: $lxd_url, rootfs_size: ($rootfs_size_str|tonumber), lxd_size: ($lxd_size_str|tonumber), rootfs_sha256: $rootfs_sha256, lxd_sha256: $lxd_sha256, rootfs_md5: $rootfs_md5, lxd_md5: $lxd_md5}]' ../processed_assets.json > ../processed_assets_temp.json
                  mv ../processed_assets_temp.json ../processed_assets.json
                  echo "Uploaded $os $version $arch $variant"
                else
                  echo "Failed to upload files for $name"
                fi
              else
                echo "Missing required files in $name"
              fi
            else
              echo "Failed to download or extract $name"
            fi
            cd ..
            rm -rf "$temp_dir"
          done
          mv processed_assets.json /tmp/processed_assets.json

      - name: 生成 Simplestreams JSON
        run: |
          mkdir -p pages/streams/v1
          # 获取 processed release 的所有 assets
          curl -s "https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.get_processed_release.outputs.release_id }}/assets" > assets.json
          echo "[]" > all_assets.json
          if [ "$(jq '. | length' assets.json)" -gt 0 ]; then
            jq -r '.[] | select(.name | test("^[a-z0-9]+-[0-9a-z\\.-]+-[a-z0-9]+-[a-z]+-rootfs\\.squashfs$")) | @base64' assets.json | while IFS= read -r encoded; do
              [ -z "$encoded" ] && continue
              asset=$(echo "$encoded" | base64 -d)
              name=$(echo "$asset" | jq -r '.name')
              rootfs_url=$(echo "$asset" | jq -r '.browser_download_url')
              rootfs_size=$(echo "$asset" | jq -r '.size')
              if [[ "$name" =~ ^([a-z0-9]+)-([0-9a-z\.\-]+)-([a-z0-9]+)-([a-z]+)-rootfs\.squashfs$ ]]; then
                os="${BASH_REMATCH[1]}"
                version="${BASH_REMATCH[2]}"
                arch="${BASH_REMATCH[3]}"
                variant="${BASH_REMATCH[4]}"
                lxd_name="${os}-${version}-${arch}-${variant}-lxd.tar.xz"
                lxd_url=$(jq -r --arg lxd_name "$lxd_name" '.[] | select(.name == $lxd_name) | .browser_download_url // empty' assets.json)
                lxd_size=$(jq -r --arg lxd_name "$lxd_name" '.[] | select(.name == $lxd_name) | .size // empty' assets.json)
                if [ -n "$lxd_url" ]; then
                  jq -n --arg os "$os" \
                        --arg version "$version" \
                        --arg arch "$arch" \
                        --arg variant "$variant" \
                        --arg rootfs_url "$rootfs_url" \
                        --arg lxd_url "$lxd_url" \
                        --arg rootfs_size_str "$rootfs_size" \
                        --arg lxd_size_str "$lxd_size" \
                        '. += [{os: $os, version: $version, arch: $arch, variant: $variant, rootfs_url: $rootfs_url, lxd_url: $lxd_url, rootfs_size: ($rootfs_size_str|tonumber), lxd_size: ($lxd_size_str|tonumber)}]' >> temp_assets.jsonl
                else
                  echo "WARNING: Missing matching lxd file for $name"
                fi
              else
                echo "WARNING: Filename did not match expected pattern: $name"
              fi
            done
            if [ -f temp_assets.jsonl ]; then
              jq -s '.' temp_assets.jsonl > temp_existing_assets.json
              jq -s '.[0] + .[1]' all_assets.json temp_existing_assets.json > all_assets_temp.json
              mv all_assets_temp.json all_assets.json
              rm -f temp_assets.jsonl temp_existing_assets.json
            fi
          fi
          if [ -f /tmp/processed_assets.json ] && [ "$(jq '. | length' /tmp/processed_assets.json)" -gt 0 ]; then
            jq -s '.[0] + .[1]' all_assets.json /tmp/processed_assets.json > combined_assets.json
            mv combined_assets.json all_assets.json
          fi
          if [ "$(jq '. | length' all_assets.json)" -eq 0 ]; then
            echo '{"index": {"images:download": { "datatype": "image-downloads", "path": "streams/v1/download.json", "products": [], "format": "products:1.0", "updated": "" }}, "format": "index:1.0", "updated": ""}' > pages/streams/v1/index.json
            echo '{"content_id": "images:download", "datatype": "image-downloads", "format": "products:1.0", "products": {}}' > pages/streams/v1/download.json
            exit 0
          fi
          NOW=$(date -u -R)
          jq -n --slurpfile assets all_assets.json --arg date "$NOW" '
            {
              content_id: "images:download",
              datatype: "image-downloads",
              format: "products:1.0",
              updated: $date,
              products: (
                $assets[0]
                | group_by(.os + ":" + .version + ":" + .arch)
                | map(
                    . as $group |
                    $group | map(.variant) as $variants |
                    $group[] |
                    {
                      key: (.os + ":" + .version + ":" + .arch + (if .variant != "default" then ":" + .variant else "" end)),
                      value: {
                        aliases: (
                          (if ($variants | index("cloud")) then (if .variant == "cloud" then ["\(.os)/\(.version)", "\(.os)/\(.version)/\(.arch)"] else [] end 
                           else (if .variant == "default" then ["\(.os)/\(.version)", "\(.os)/\(.version)/\(.arch)"] else [] end) end)
                          + ["\(.os)/\(.version)/\(.variant)", "\(.os)/\(.version)/\(.arch)/\(.variant)"]
                        ) | join(" "),
                        arch: .arch,
                        os: .os,
                        release: (.codename // .version),
                        release_title: .version,
                        release_codename: (if .codename then .codename else empty end),
                        variant: (if .variant != "default" then .variant else "" end),
                        version: .version,
                        supported: true,
                        versions: {
                          ($date): {
                            items: {
                              "rootfs.squashfs": {
                                ftype: "squashfs",
                                path: .rootfs_url,
                                sha256: (if .rootfs_sha256 then .rootfs_sha256 else empty end),
                                md5: (if .rootfs_md5 then .rootfs_md5 else empty end),
                                size: (if .rootfs_size then .rootfs_size else 0 end)
                              },
                              "lxd.tar.xz": {
                                ftype: "lxd.tar.xz",
                                path: .lxd_url,
                                sha256: (if .lxd_sha256 then .lxd_sha256 else empty end),
                                md5: (if .lxd_md5 then .lxd_md5 else empty end),
                                size: (if .lxd_size then .lxd_size else 0 end)
                              }
                            }
                          }
                        }
                      }
                    }
                  )
                | from_entries
              )
            }
          ' > pages/streams/v1/download.json
          products_list=$(jq '.products | keys' pages/streams/v1/download.json)
          jq -n --arg updated "$NOW" --argjson products_list "$products_list" '
            {
              format: "index:1.0",
              updated: $updated,
              index: {
                "images:download": {
                  datatype: "image-downloads",
                  path: "streams/v1/download.json",
                  updated: $updated,
                  products: $products_list,
                  format: "products:1.0"
                }
              }
            }
          ' > pages/streams/v1/index.json

      - name: 生成网页界面
        run: |
          cat > pages/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="zh-CN">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>LXD Images Repository</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
                  h1 { color: #333; border-bottom: 2px solid #ddd; padding-bottom: 10px; }
                  h2 { color: #666; margin-top: 30px; }
                  .container { max-width: 1200px; margin: 0 auto; }
                  .image-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); gap: 20px; margin: 20px 0; }
                  .image-card { border: 1px solid #ddd; padding: 15px; border-radius: 5px; }
                  .image-card h3 { margin-top: 0; color: #333; }
                  .version-list { margin: 10px 0; }
                  .version-item { margin: 5px 0; padding: 10px; background: #f5f5f5; border-radius: 3px; }
                  .arch-item { margin: 8px 0; padding: 8px; background: #fff; border: 1px solid #e0e0e0; border-radius: 3px; }
                  .download-links { margin: 5px 0; }
                  .download-links a { margin-right: 10px; padding: 4px 8px; background: #007cba; color: white; text-decoration: none; border-radius: 3px; font-size: 12px; }
                  .download-links a:hover { background: #005a8b; }
                  .variants { margin-top: 8px; font-size: 12px; }
                  .variants .variant-item { margin: 4px 0; padding: 4px 8px; background: #e8f4f8; border-radius: 2px; }
                  .usage-section { background: #f9f9f9; padding: 20px; border-radius: 5px; margin: 20px 0; }
                  .usage-examples { background: #fff; padding: 15px; border-radius: 3px; margin: 10px 0; }
                  pre { background: #f4f4f4; padding: 10px; border-radius: 3px; overflow-x: auto; font-size: 14px; }
                  .note { background: #fffbf0; padding: 10px; border-left: 4px solid #ffa500; margin: 10px 0; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>LXD Images Repository</h1>
                  <p>本仓库提供各种 Linux 发行版的 LXD 容器镜像。</p>
                  <div class="usage-section">
                      <h2>使用方法</h2>
                      <p>添加此镜像源到您的 LXD 配置：</p>
                      <pre>lxc remote add spiritlhl-images http://lxdimages.spiritlhl.net --protocol=simplestreams --public</pre>
                      <div class="usage-examples">
                          <p><strong>基本使用（使用默认变体）：</strong></p>
                          <pre>lxc launch spiritlhl-images:debian/11 my-container</pre>
                          <p><strong>指定架构：</strong></p>
                          <pre>lxc launch spiritlhl-images:debian/11/arm64 my-arm-container</pre>
                          <p><strong>指定特定变体：</strong></p>
                          <pre>lxc launch spiritlhl-images:debian/11/amd64/default my-default-container</pre>
                      </div>
                      <div class="note">
                          <strong>注意：</strong> 如果存在多个变体，默认会使用 cloud 变体。如需使用其他变体，请在命令中明确指定。
                      </div>
                      <p>列出可用镜像：</p>
                      <pre>lxc image list spiritlhl-images:</pre>
                  </div>
                  <h2>可用镜像</h2>
                  <div id="images-container">
                      <p>加载中...</p>
                  </div>
              </div>
              <script>
                  async function loadImages() {
                      try {
                          const response = await fetch('./streams/v1/download.json');
                          if (!response.ok) {
                              throw new Error(`HTTP error! status: ${response.status}`);
                          }
                          const data = await response.json();
                          displayImages(data.products);
                      } catch (error) {
                          console.error('Error loading images:', error);
                          document.getElementById('images-container').innerHTML = '<p>加载镜像列表失败: ' + error.message + '</p>';
                      }
                  }
                  function displayImages(products) {
                      const container = document.getElementById('images-container');
                      if (!products || Object.keys(products).length === 0) {
                          container.innerHTML = '<p>暂无可用镜像</p>';
                          return;
                      }
                      const imageCards = Object.entries(products).map(([id, product]) => {
                          const versionData = Object.values(product.versions)[0];
                          const rootfsPath = versionData.items["rootfs.squashfs"].path;
                          const lxdPath = versionData.items["lxd.tar.xz"].path;
                          const variantLabel = product.variant && product.variant !== '' ? product.variant : '默认变体';
                          return `
                              <div class="image-card">
                                  <h3>${product.os}</h3>
                                  <p>使用方式: <code>lxc launch spiritlhl-images:${product.os}/${product.version} ${product.os}-${product.version}-container</code></p>
                                  <div class="version-list">
                                      <div class="version-item">
                                          <strong>版本: ${product.version}</strong>
                                          <div class="arch-item">
                                              <strong>${product.arch}</strong> (${variantLabel})
                                              <div class="download-links">
                                                  <a href="${rootfsPath}" download>rootfs</a>
                                                  <a href="${lxdPath}" download>metadata</a>
                                              </div>
                                          </div>
                                      </div>
                                  </div>
                              </div>
                          `;
                      }).join('');
                      container.innerHTML = `<div class="image-grid">${imageCards}</div>`;
                  }
                  document.addEventListener('DOMContentLoaded', loadImages);
              </script>
          </body>
          </html>
          EOF
          echo "lxdimages.spiritlhl.net" > pages/CNAME

      - name: 部署 GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./pages
          publish_branch: gh-pages
          force_orphan: true
