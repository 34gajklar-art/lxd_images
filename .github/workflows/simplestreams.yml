name: Build LXD Simplestreams

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 */10 * *'

jobs:
  build-simplestreams:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3 python3-pip snapd wget
        sudo pip install PyYAML
        sudo snap install --edge lxd-imagebuilder --classic
        lxd-imagebuilder --version
        
    - name: Install simplestream-maintainer
      run: |
        sudo apt-get update
        sudo apt-get install -y golang git
        git clone https://github.com/canonical/lxd-imagebuilder
        sed -i '/page := WebPage{/,/Images: \[\]WebPageImage{}/c\page := WebPage{\n    Title:           "spiritlhl LXD Images",\n    FaviconURL:      "https://cdn.spiritlhl.net/https://raw.githubusercontent.com/spiritlhls/pages/main/logo.png",\n    LogoURL:         "https://cdn.spiritlhl.net/https://raw.githubusercontent.com/spiritlhls/pages/main/logo.png",\n    FooterCopyright: fmt.Sprintf("Â© %d spiritlhl community.", time.Now().Year()),\n    FooterUpdatedAt: fmt.Sprintf("Last updated: %s UTC", time.Now().UTC().Format("02 Jan 2006 (15:04)")),\n    Paragraphs: []template.HTML{\n        template.HTML(`Images hosted on this server are available in LXD through the predefined remote <code>spiritlhl:</code>.<br>\n        <strong>Quick setup:</strong><br>\n        <pre>\nlxc remote remove spiritlhl\nlxc remote add spiritlhl https://lxdimages.spiritlhl.net --protocol simplestreams --public\nlxc image list spiritlhl:debian\n        </pre>\n        For more usage examples, please refer to our\n        <a href=\'https://github.com/oneclickvirt/lxd_images\' target=\'_blank\'>GitHub project</a>\n        or join our <a href=\'https://t.me/spiritlhl\' target=\'_blank\'>Telegram group</a>.`),\n\n        template.HTML(`Images are built daily and we retain the last 2 successful builds of each image for up to 15 days.\n        Thus, if a particular build fails on any given day, the previous successful builds will remain accessible.`),\n\n        template.HTML(`If you encounter any issues with the images hosted on this server or have suggestions for improvement,\n        please let us know by <a href=\'https://github.com/oneclickvirt/lxd_images/issues/new\' target=\'_blank\'>opening an issue</a> on GitHub.<br>\n        <br>\n        <a href=\'https://www.spiritlhl.net/\' target=\'_blank\'>Visit spiritlhl main site</a>\n        `),\n    },\n    Images: []WebPageImage{},\n}' lxd-imagebuilder/simplestream-maintainer/webpage/webpage.go
        sed -i '/<p class="lxd-note py-4 p-3">/,/<\/p>/c\<p class="lxd-note py-4 p-3">\n<b>NOTE:</b> The images provided by this server are built and served by <a href="https://www.spiritlhl.net" target="_blank">www.spiritlhl.net</a>. Use at your own discretion.\n</p>' lxd-imagebuilder/embed/templates/index.html
        cd lxd-imagebuilder/simplestream-maintainer
        go build -o simplestream-maintainer .
        sudo mv simplestream-maintainer /usr/local/bin/
        simplestream-maintainer --version
        simplestream-maintainer build -h

    - name: Download assets from GitHub Release
      run: |
        python3 <<EOF
        import requests, os, re, glob
        from datetime import datetime
        API_URL = "https://api.github.com/repos/oneclickvirt/lxd_images/releases/tags/processed"
        OUTDIR = "build/spiritlhl"
        os.makedirs(OUTDIR, exist_ok=True)
        r = requests.get(API_URL)
        r.raise_for_status()
        assets = r.json().get("assets", [])
        seen_dirs = set()
        dt = datetime.now().strftime("%Y%m%d_%H%M")
        for a in assets:
            name = a["name"]
            url = a["browser_download_url"]
            m = re.match(r"([a-zA-Z0-9]+)-([^-]+)-([^-]+)-([^-]+)-(rootfs|lxd)\.(squashfs|tar\.xz)", name)
            if not m: continue
            os_name, rel, arch, variant, t, ext = m.groups()
            local_dir = f"{OUTDIR}/{os_name}/{rel}/{arch}/{variant}/{dt}"
            os.makedirs(local_dir, exist_ok=True)
            local_file = f"{local_dir}/{name}"
            if not os.path.exists(local_file):
                print("Downloading", url)
                resp = requests.get(url, stream=True)
                with open(local_file, "wb") as f:
                    for chunk in resp.iter_content(8192):
                        f.write(chunk)
            if local_dir not in seen_dirs:
                meta_file = f"{local_dir}/meta.yaml"
                if not os.path.exists(meta_file):
                    with open(meta_file, "w") as mf:
                        mf.write(f"architecture: {arch}\n")
                        mf.write(f"os: {os_name}\n")
                        mf.write(f"release: {rel}\n")
                        mf.write(f"variant: {variant}\n")
                        mf.write(f"type: {t}\n")
                        mf.write(f"created_at: {dt}\n")
                seen_dirs.add(local_dir)
        for d, _, _ in os.walk(OUTDIR):
            for f in glob.glob(os.path.join(d, "*-rootfs.squashfs")):
                os.rename(f, os.path.join(d, "rootfs.squashfs"))
            for f in glob.glob(os.path.join(d, "*-lxd.tar.xz")):
                os.rename(f, os.path.join(d, "lxd.tar.xz"))
        EOF

    - name: Generate SHA256SUMS for images
      run: |
        find build/spiritlhl -type d | while read d; do
          cd "$d"
          files=""
          for f in rootfs.squashfs lxd.tar.xz; do
            if [ -f "$f" ]; then
              files="$files $f"
            fi
          done
          if [ -n "$files" ]; then
            sha256sum $files > SHA256SUMS
            echo "Generated SHA256SUMS in $d"
          fi
          cd - >/dev/null
        done

    - name: Build simplestreams index and webpage
      run: |
        ls
        simplestream-maintainer build build --build-webpage -d spiritlhl

    - name: Patch index.html for spiritlhl (content-only)
      run: |
        find build -name "index.html" | while read -r f; do
          sed -i 's/images:/spiritlhl:/g' "$f"
          echo "Patched $f"
        done

    - name: List build contents
      run: |
        echo "Build directory contents:"
        find build -type f | head -30

    - name: Deploy to Netlify
      uses: nwtgck/actions-netlify@v3.0
      with:
        publish-dir: './build'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
