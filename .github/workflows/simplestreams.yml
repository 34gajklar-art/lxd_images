name: Build LXD Simplestreams

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-simplestreams:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3 python3-pip snapd wget
        sudo pip install PyYAML
        sudo snap install --edge lxd-imagebuilder --classic
        lxd-imagebuilder --version
        
    - name: Install simplestream-maintainer
      run: |
        sudo apt-get update
        sudo apt-get install -y golang git
        git clone https://github.com/canonical/lxd-imagebuilder
        cd lxd-imagebuilder/simplestream-maintainer
        go build -o simplestream-maintainer .
        sudo mv simplestream-maintainer /usr/local/bin/
        simplestream-maintainer --version
        simplestream-maintainer build -h

    - name: Download assets from GitHub Release
      run: |
        python3 <<EOF
        import requests, os, re, glob
        from datetime import datetime
        API_URL = "https://api.github.com/repos/oneclickvirt/lxd_images/releases/tags/processed"
        OUTDIR = "build/spiritlhl"
        os.makedirs(OUTDIR, exist_ok=True)
        r = requests.get(API_URL)
        r.raise_for_status()
        assets = r.json().get("assets", [])
        seen_dirs = set()
        dt = datetime.now().strftime("%Y%m%d_%H%M")
        for a in assets:
            name = a["name"]
            url = a["browser_download_url"]
            m = re.match(r"([a-zA-Z0-9]+)-([^-]+)-([^-]+)-([^-]+)-(rootfs|lxd)\.(squashfs|tar\.xz)", name)
            if not m: continue
            os_name, rel, arch, variant, t, ext = m.groups()
            local_dir = f"{OUTDIR}/{os_name}/{rel}/{arch}/{variant}/{dt}"
            os.makedirs(local_dir, exist_ok=True)
            local_file = f"{local_dir}/{name}"
            if not os.path.exists(local_file):
                print("Downloading", url)
                resp = requests.get(url, stream=True)
                with open(local_file, "wb") as f:
                    for chunk in resp.iter_content(8192):
                        f.write(chunk)
            if local_dir not in seen_dirs:
                meta_file = f"{local_dir}/meta.yaml"
                if not os.path.exists(meta_file):
                    with open(meta_file, "w") as mf:
                        mf.write(f"architecture: {arch}\n")
                        mf.write(f"os: {os_name}\n")
                        mf.write(f"release: {rel}\n")
                        mf.write(f"variant: {variant}\n")
                        mf.write(f"type: {t}\n")
                        mf.write(f"created_at: {dt}\n")
                seen_dirs.add(local_dir)
        # 下载后统一重命名
        for d, _, _ in os.walk(OUTDIR):
            for f in glob.glob(os.path.join(d, "*-rootfs.squashfs")):
                os.rename(f, os.path.join(d, "rootfs.squashfs"))
            for f in glob.glob(os.path.join(d, "*-lxd.tar.xz")):
                os.rename(f, os.path.join(d, "lxd.tar.xz"))
        EOF

    - name: Generate SHA256SUMS for images
      run: |
        find build/spiritlhl -type d | while read d; do
          cd "$d"
          files=""
          for f in rootfs.squashfs lxd.tar.xz; do
            if [ -f "$f" ]; then
              files="$files $f"
            fi
          done
          if [ -n "$files" ]; then
            sha256sum $files > SHA256SUMS
            echo "Generated SHA256SUMS in $d"
          fi
          cd - >/dev/null
        done

    - name: Build simplestreams index and webpage
      run: |
        ls
        simplestream-maintainer build build --build-webpage -d spiritlhl

    - name: Patch index.html for spiritlhl
      run: |
        find build -name "index.html" | while read f; do
          sed -i 's/images:/spiritlhl:/g' "$f"
          echo "Patched $f"
        done
        sed -i '/<div class=col-md-6>/,/<\/div>/c\
        <div class=col-md-6>\
        <p><b>使用方式：</b><br>\
        <code>lxc remote remove spiritlhl</code><br>\
        <code>lxc remote add spiritlhl https://lxdimages.spiritlhl.net --protocol simplestreams --public</code><br>\
        <code>lxc image list spiritlhl:debian</code>\
        </p>\
        <p>该镜像仓库每日自动构建。<br>\
        使用中如遇到问题，或有建议，欢迎前往 <a href="https://github.com/oneclickvirt/lxd_images">源仓库</a> 提Issue，或加入 <a href="https://t.me/spiritlhl">维护者TG频道</a> 交流。<br>\
        更详细的维护说明见 <a href="https://www.spiritlhl.net/guide/lxd/lxd_precheck.html">使用与维护文档</a>。</p>\
        </div>' build/index.html
        sed -i '/<div class="lxd-note py-4 p-3">/,/<\/div>/c\
        <div class="lxd-note py-4 p-3"><b>NOTE:</b> 本镜像仓库由 <b>spiritlhl</b> 个人维护，仅供学习和测试用途，生产环境建议使用官方镜像。\
        </div>' build/index.html

    - name: Patch simplestreams for GitHub download redirect
      run: |
        ls build/streams/v1/
        python3 <<EOF
        import os, json, re, requests
        API_URL = "https://api.github.com/repos/oneclickvirt/lxd_images/releases/tags/processed"
        r = requests.get(API_URL)
        r.raise_for_status()
        assets = r.json().get("assets", [])
        url_map = {a["name"]: a["browser_download_url"] for a in assets}
        json_path = "build/streams/v1/spiritlhl.json"
        with open(json_path, "r") as f:
            images = json.load(f)
        changed = False
        for prod in images["products"].values():
            for ver in prod["versions"].values():
                for item in ver["items"].values():
                    basename = os.path.basename(item["path"])
                    if basename in url_map:
                        item["path"] = url_map[basename]
                        changed = True
        if changed:
            with open(json_path, "w") as f:
                json.dump(images, f, indent=2)
        EOF

    - name: List build contents
      run: |
        echo "Build directory contents:"
        find build -type f | head -30

    - name: Deploy to Netlify
      uses: nwtgck/actions-netlify@v3.0
      with:
        publish-dir: './build'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
