name: Build LXD Images Repository

on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  build-repository:
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: 生成 Simplestreams JSON
        run: |
          mkdir -p pages/streams/v1
          echo "Getting existing assets from processed release..."
          echo "[]" > all_assets.json
          processed_assets_response=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases" | jq -r '.[] | select(.tag_name=="processed") | .assets // empty')
          if [ "$processed_assets_response" != "null" ] && [ "$processed_assets_response" != "empty" ] && [ -n "$processed_assets_response" ]; then
            echo "$processed_assets_response" > existing_assets_array.json
            if [ "$(jq length existing_assets_array.json)" -gt 0 ]; then
              jq -r '.[] | select(.name | test("^[a-z0-9]+-[0-9a-z\\.-]+-[a-z0-9]+-[a-z]+-rootfs\\.squashfs$")) | @base64' existing_assets_array.json | while IFS= read -r encoded_asset; do
                if [ -z "$encoded_asset" ]; then
                  continue
                fi
                asset=$(echo "$encoded_asset" | base64 -d)
                name=$(echo "$asset" | jq -r '.name')
                rootfs_url=$(echo "$asset" | jq -r '.browser_download_url')
                rootfs_size=$(echo "$asset" | jq -r '.size')
                echo "Processing existing asset: $name"
                if [[ "$name" =~ ^([a-z0-9]+)-([0-9a-z\.\-]+)-([a-z0-9]+)-([a-z]+)-rootfs\.squashfs$ ]]; then
                  os="${BASH_REMATCH[1]}"
                  version="${BASH_REMATCH[2]}"
                  arch="${BASH_REMATCH[3]}"
                  variant="${BASH_REMATCH[4]}"
                  lxd_name="${os}-${version}-${arch}-${variant}-lxd.tar.xz"
                  lxd_info=$(jq -r --arg lxd_name "$lxd_name" '.[] | select(.name == $lxd_name) | {url: .browser_download_url, size: .size} // empty' existing_assets_array.json)
                  lxd_url=$(echo "$lxd_info" | jq -r '.url // empty')
                  lxd_size=$(echo "$lxd_info" | jq -r '.size // empty')
                  if [ -n "$lxd_url" ] && [ "$lxd_url" != "null" ] && [ "$lxd_url" != "empty" ]; then
                    echo "Found existing asset pair: $name and $lxd_name"
                    temp_asset=$(jq -n --arg os "$os" \
                       --arg version "$version" \
                       --arg arch "$arch" \
                       --arg variant "$variant" \
                       --arg rootfs_url "$rootfs_url" \
                       --arg lxd_url "$lxd_url" \
                       --arg rootfs_size "$rootfs_size" \
                       --arg lxd_size "$lxd_size" \
                       '{
                         os: $os,
                         version: $version,
                         arch: $arch,
                         variant: $variant,
                         rootfs_url: $rootfs_url,
                         lxd_url: $lxd_url,
                         rootfs_size: ($rootfs_size | tonumber),
                         lxd_size: ($lxd_size | tonumber),
                         rootfs_sha256: "unknown",
                         lxd_sha256: "unknown",
                         combined_sha256: "unknown"
                       }')
                    echo "$temp_asset" >> temp_assets.jsonl
                  fi
                fi
              done
              if [ -f temp_assets.jsonl ]; then
                jq -s '.' temp_assets.jsonl > temp_existing_assets.json
                jq -s '.[0] + .[1]' all_assets.json temp_existing_assets.json > all_assets_temp.json
                mv all_assets_temp.json all_assets.json
                rm -f temp_assets.jsonl temp_existing_assets.json
              fi
            fi
          else
            echo "No existing assets found in processed release"
          fi
          if [ -f /tmp/processed_assets.json ] && [ "$(jq length /tmp/processed_assets.json)" -gt 0 ]; then
            jq -s '.[0] + .[1]' all_assets.json /tmp/processed_assets.json > combined_assets.json
            mv combined_assets.json all_assets.json
          fi
          if [ "$(jq length all_assets.json)" -eq 0 ]; then
            echo "No assets found, creating empty structure"
            echo '{
              "datatype": "image-downloads",
              "format": "products:1.0",
              "products": {}
            }' > pages/streams/v1/products.json
            echo '{
              "index": {
                "images": {
                  "datatype": "image-downloads",
                  "path": "streams/v1/products.json",
                  "format": "products:1.0"
                }
              },
              "format": "index:1.0"
            }' > pages/streams/v1/index.json
            exit 0
          fi
          current_time=$(date -u +"%Y%m%d_%H:%M")
          jq -n --slurpfile assets all_assets.json --arg updated "$current_time" '
            {
              "datatype": "image-downloads",
              "format": "products:1.0",
              "products": (
                $assets[0]
                | group_by(.os)
                | map({
                    key: .[0].os,
                    value: {
                      "arch": (map(.arch) | unique),
                      "release": .[0].os,
                      "os": .[0].os,
                      "versions": (
                        group_by(.version)
                        | map({
                            key: .[0].version,
                            value: {
                              "items": (
                                group_by(.arch)
                                | map({
                                    key: .[0].arch,
                                    value: (
                                      group_by(.variant)
                                      | map({
                                          key: .[0].variant,
                                          value: {
                                            "ftype": "squashfs",
                                            "os": .[0].os,
                                            "release": .[0].version,
                                            "version": .[0].version,
                                            "arch": .[0].arch,
                                            "variant": .[0].variant,
                                            "combined_sha256": .[0].combined_sha256,
                                            "path": ("images/" + .[0].os + "/" + .[0].version + "/" + .[0].arch + "/" + .[0].variant + "/"),
                                            "versions": {
                                              ($updated): {
                                                "items": {
                                                  "lxd.tar.xz": {
                                                    "ftype": "lxd.tar.xz",
                                                    "size": .[0].lxd_size,
                                                    "sha256": .[0].lxd_sha256,
                                                    "path": ("images/" + .[0].os + "/" + .[0].version + "/" + .[0].arch + "/" + .[0].variant + "/" + $updated + "/lxd.tar.xz")
                                                  },
                                                  "rootfs.squashfs": {
                                                    "ftype": "squashfs",
                                                    "size": .[0].rootfs_size,
                                                    "sha256": .[0].rootfs_sha256,
                                                    "path": ("images/" + .[0].os + "/" + .[0].version + "/" + .[0].arch + "/" + .[0].variant + "/" + $updated + "/rootfs.squashfs")
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        })
                                      | from_entries
                                    )
                                  })
                                | from_entries
                              )
                            }
                          })
                        | from_entries
                      )
                    }
                  })
                | from_entries
              )
            }
          ' > pages/streams/v1/products.json
          echo '{
            "index": {
              "images": {
                "datatype": "image-downloads",
                "path": "streams/v1/products.json",
                "format": "products:1.0"
              }
            },
            "format": "index:1.0"
          }' > pages/streams/v1/index.json
          
          mkdir -p pages/streams/v1/images
          jq -r --arg updated "$current_time" '
            .[] |
            "mkdir -p pages/streams/v1/images/\(.os)/\(.version)/\(.arch)/\(.variant)/\($updated);" +
            "ln -sf \(.rootfs_url) pages/streams/v1/images/\(.os)/\(.version)/\(.arch)/\(.variant)/\($updated)/rootfs.squashfs;" +
            "ln -sf \(.lxd_url) pages/streams/v1/images/\(.os)/\(.version)/\(.arch)/\(.variant)/\($updated)/lxd.tar.xz"
          ' all_assets.json | bash
          
          echo "Generated Simplestreams JSON files:"
          echo "products.json:"
          cat pages/streams/v1/products.json | jq .
          echo "index.json:"
          cat pages/streams/v1/index.json | jq .

      - name: 生成网页界面
        run: |
          cat > pages/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="zh-CN">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>LXD Images Repository</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
                  h1 { color: #333; border-bottom: 2px solid #ddd; padding-bottom: 10px; }
                  h2 { color: #666; margin-top: 30px; }
                  .container { max-width: 1200px; margin: 0 auto; }
                  .image-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); gap: 20px; margin: 20px 0; }
                  .image-card { border: 1px solid #ddd; padding: 15px; border-radius: 5px; }
                  .image-card h3 { margin-top: 0; color: #333; }
                  .version-list { margin: 10px 0; }
                  .version-item { margin: 5px 0; padding: 10px; background: #f5f5f5; border-radius: 3px; }
                  .arch-item { margin: 8px 0; padding: 8px; background: #fff; border: 1px solid #e0e0e0; border-radius: 3px; }
                  .download-links { margin: 5px 0; }
                  .download-links a { margin-right: 10px; padding: 4px 8px; background: #007cba; color: white; text-decoration: none; border-radius: 3px; font-size: 12px; }
                  .download-links a:hover { background: #005a8b; }
                  .variants { margin-top: 8px; font-size: 12px; }
                  .variants .variant-item { margin: 4px 0; padding: 4px 8px; background: #e8f4f8; border-radius: 2px; }
                  .usage-section { background: #f9f9f9; padding: 20px; border-radius: 5px; margin: 20px 0; }
                  .usage-examples { background: #fff; padding: 15px; border-radius: 3px; margin: 10px 0; }
                  pre { background: #f4f4f4; padding: 10px; border-radius: 3px; overflow-x: auto; font-size: 14px; }
                  .note { background: #fffbf0; padding: 10px; border-left: 4px solid #ffa500; margin: 10px 0; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>LXD Images Repository</h1>
                  <p>本仓库提供各种 Linux 发行版的 LXD 容器镜像。</p>
                  <div class="usage-section">
                      <h2>使用方法</h2>
                      <p>添加此镜像源到您的 LXD 配置：</p>
                      <pre>lxc remote add spiritlhl-images http://lxdimages.spiritlhl.net --protocol=simplestreams --public</pre>
                      <div class="usage-examples">
                          <p><strong>基本使用：</strong></p>
                          <pre>lxc launch spiritlhl-images:debian/11 my-container</pre>
                          <p><strong>指定架构：</strong></p>
                          <pre>lxc launch spiritlhl-images:debian/11/arm64 my-arm-container</pre>
                          <p><strong>指定特定变体：</strong></p>
                          <pre>lxc launch spiritlhl-images:debian/11/amd64/default my-default-container</pre>
                      </div>
                      <p>列出可用镜像：</p>
                      <pre>lxc image list spiritlhl-images:</pre>
                  </div>
                  <h2>可用镜像</h2>
                  <div id="images-container">
                      <p>加载中...</p>
                  </div>
              </div>
              <script>
                  async function loadImages() {
                      try {
                          const response = await fetch('./streams/v1/products.json');
                          if (!response.ok) {
                              throw new Error(`HTTP error! status: ${response.status}`);
                          }
                          const data = await response.json();
                          console.log('Loaded data:', data);
                          displayImages(data.products);
                      } catch (error) {
                          console.error('Error loading images:', error);
                          document.getElementById('images-container').innerHTML = '<p>加载镜像列表失败: ' + error.message + '</p>';
                      }
                  }
                  function displayImages(products) {
                      const container = document.getElementById('images-container');
                      if (!products || Object.keys(products).length === 0) {
                          container.innerHTML = '<p>暂无可用镜像</p>';
                          return;
                      }
                      const imageCards = Object.entries(products).map(([productId, product]) => {
                          const versions = Object.entries(product.versions).map(([version, versionData]) => {
                              const architectures = Object.entries(versionData.items).map(([arch, archData]) => {
                                  const variants = Object.entries(archData).map(([variant, variantData]) => {
                                      const latestVersion = Object.keys(variantData.versions)[0];
                                      const items = variantData.versions[latestVersion].items;
                                      return `
                                          <div class="variant-item">
                                              <strong>${variant}:</strong>
                                              <a href="${items['rootfs.squashfs'].path}" download style="margin-left: 5px; font-size: 11px;">rootfs</a>
                                              <a href="${items['lxd.tar.xz'].path}" download style="margin-left: 5px; font-size: 11px;">metadata</a>
                                          </div>
                                      `;
                                  }).join('');
                                  return `
                                      <div class="arch-item">
                                          <strong>${arch}</strong>
                                          <div class="variants">
                                              <strong>可用变体：</strong>
                                              ${variants}
                                          </div>
                                      </div>
                                  `;
                              }).join('');
                              return `
                                  <div class="version-item">
                                      <strong>版本: ${version}</strong>
                                      ${architectures}
                                  </div>
                              `;
                          }).join('');
                          return `
                              <div class="image-card">
                                  <h3>${productId}</h3>
                                  <p>使用方式: <code>lxc launch spiritlhl-images:${productId} container-name</code></p>
                                  <div class="version-list">
                                      ${versions}
                                  </div>
                              </div>
                          `;
                      }).join('');
                      container.innerHTML = `<div class="image-grid">${imageCards}</div>`;
                  }
                  document.addEventListener('DOMContentLoaded', loadImages);
              </script>
          </body>
          </html>
          EOF
          echo "lxdimages.spiritlhl.net" > pages/CNAME

      - name: 部署 GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./pages
          publish_branch: gh-pages
          force_orphan: true
