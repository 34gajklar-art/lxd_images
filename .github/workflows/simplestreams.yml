name: Build & Deploy SimpleStreams from GitHub Releases

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up Python for fetching release assets and generating inputs
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # 3. Install Python dependencies
      - name: Install Python dependencies
        run: |
          pip install requests pyyaml

      # 4. Fetch GitHub Release assets, generate per-product ssb.json and tree.yml under build/
      - name: Generate inputs for simplestreams-builder
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python3 << 'EOF'
          import os, requests, json, yaml, hashlib
          from datetime import datetime, timezone

          # Configuration
          REPO = 'oneclickvirt/lxd_images'
          TAG = 'processed'
          BASE_URL = f'https://github.com/{REPO}/releases/download/{TAG}'
          OUT = 'build'

          PREFIX = ""
          IMAGES_PATH = "streams/v1"
          DATATYPE = "image-downloads"
          FORMAT = "products:1.0"

          # Helpers
          def parse_filename(name):
              if name.endswith('-lxd.tar.xz'):
                  base = name[:-11]
              elif name.endswith('-rootfs.squashfs'):
                  base = name[:-15]
              else:
                  return None
              parts = base.split('-')
              if len(parts) < 4:
                  return None
              return dict(os=parts[0], release=parts[1],
                          arch=parts[2], variant=parts[3], name=base)

          def sha256_placeholder():
              return hashlib.sha256(b'placeholder').hexdigest()

          # Fetch release info
          headers = {'Authorization': f'token {os.getenv("GITHUB_TOKEN","")}'}
          resp = requests.get(f'https://api.github.com/repos/{REPO}/releases/tags/{TAG}', headers=headers)
          resp.raise_for_status()
          assets = resp.json().get('assets', [])

          # Prepare output dirs
          os.makedirs(OUT, exist_ok=True)
          products = []
          timestamp = datetime.now(timezone.utc).strftime('%Y%m%d_%H%M%S')

          # Pair up lxd and rootfs assets
          lxd_assets = [a for a in assets if a['name'].endswith('-lxd.tar.xz')]
          rootfs_map = {a['name']: a for a in assets if a['name'].endswith('-rootfs.squashfs')}

          for lxd in lxd_assets:
              info = parse_filename(lxd['name'])
              if not info:
                  continue
              root_name = f"{info['name']}-rootfs.squashfs"
              root = rootfs_map.get(root_name)
              if not root:
                  continue

              # Build product directory under build/
              parts = [info['os'], info['release'], info['arch']]
              if info['variant'] != 'default':
                  parts.append(info['variant'])
              prod_dir = os.path.join(OUT, *parts)
              os.makedirs(prod_dir, exist_ok=True)

              # Create ssb.json
              ssb = {
                  "version": timestamp,
                  "items": {
                      "lxd.tar.xz": {
                          "size": lxd.get('size', 0),
                          "path": f"download/{lxd['name']}",
                          "sha256": sha256_placeholder()
                      },
                      "rootfs.squashfs": {
                          "size": root.get('size', 0),
                          "path": f"download/{root['name']}",
                          "sha256": sha256_placeholder()
                      }
                  }
              }
              with open(os.path.join(prod_dir, 'ssb.json'), 'w') as f:
                  json.dump(ssb, f, indent=2, sort_keys=True)

              # Build aliases
              base_alias = f"{info['os']}/{info['release']}"
              if info['arch'] != 'amd64':
                  base_alias += f"/{info['arch']}"
              aliases = [base_alias]
              if info['variant'] != 'default':
                  aliases.append(base_alias + f"/{info['variant']}")

              products.append({
                  "name": info['name'] + (f"-{info['variant']}" if info['variant']!='default' else ""),
                  "os": info['os'],
                  "arch": info['arch'],
                  "release": info['release'],
                  "release_title": f"{info['os'].title()} {info['release']}",
                  "directory": "/".join(parts),
                  "days": 1,
                  "aliases": aliases
              })

          # Write tree.yml under build/
          tree = {
              "prefix": PREFIX,
              "images_path": IMAGES_PATH,
              "datatype": DATATYPE,
              "format": FORMAT,
              "products": products
          }
          with open(os.path.join(OUT, 'tree.yml'), 'w') as f:
              yaml.safe_dump(tree, f, sort_keys=False)
          EOF

      # 5. Set up Go and install simplestreams-builder
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Install simplestreams-builder
        run: |
          go install github.com/MottainaiCI/simplestreams-builder@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      # 6. Build images.json and index.json in build/
      - name: Build images.json
        run: |
          simplestreams-builder build-images-file --config build/tree.yml --target-dir build

      - name: Build index.json
        run: |
          simplestreams-builder build-index --config build/tree.yml --target-dir build

      # 7. Generate a simple HTML landing page
      - name: Create index.html
        run: |
          cat > build/index.html << 'EOF'
          <!DOCTYPE html>
          <html><head><meta charset="utf-8"><title>SimpleStreams Index</title></head>
          <body>
            <h1>SimpleStreams from GitHub Releases</h1>
            <p>Use:</p>
            <pre>lxc remote add spiritlhl https://<your-domain>/ --protocol simplestreams --public</pre>
            <ul>
              <li><a href="streams/v1/index.json">Index</a></li>
              <li><a href="streams/v1/images.json">Images</a></li>
            </ul>
          </body>
          </html>
          EOF

      # 8. Generate Netlify configuration
      - name: Create netlify.toml
        run: |
          cat > netlify.toml << 'EOF'
          [build]
            publish = "build"

          [[headers]]
            for = "/streams/v1/*"
            [headers.values]
              Content-Type = "application/json; charset=utf-8"
              Cache-Control = "public, max-age=300"
              Access-Control-Allow-Origin = "*"
              Access-Control-Allow-Methods = "GET, HEAD"

          [[headers]]
            for = "/download/*"
            [headers.values]
              Cache-Control = "public, max-age=86400"
          EOF

      # 9. Deploy to Netlify
      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: 'build'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
