name: Build and Deploy LXD Simplestreams

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install requests pyyaml jinja2
        
    - name: Create build directory
      run: mkdir -p build
      
    - name: Fetch and process LXD images
      run: |
        python3 << 'PYTHON_SCRIPT'
        import requests
        import json
        import hashlib
        import os
        import re
        from datetime import datetime, timezone
        
        REPO_OWNER = "oneclickvirt"
        REPO_NAME = "lxd_images"
        RELEASE_TAG = "processed"
        
        def calculate_sha256_from_url(url):
            try:
                print(f"Calculating SHA256 for: {url}")
                response = requests.get(url, stream=True)
                if response.status_code == 200:
                    sha256_hash = hashlib.sha256()
                    for chunk in response.iter_content(chunk_size=8192):
                        sha256_hash.update(chunk)
                    return sha256_hash.hexdigest()
                return None
            except Exception as e:
                print(f"Error calculating SHA256: {e}")
                return None
        
        def parse_image_filename(filename):
            base_name = filename
            for ext in ['.tar.xz', '.tar.gz', '.tar', '.squashfs']:
                if base_name.endswith(ext):
                    base_name = base_name[:-len(ext)]
                    break
            
            if base_name.endswith('-rootfs'):
                base_name = base_name[:-7]
            if base_name.endswith('-lxd'):
                base_name = base_name[:-4]
            if base_name.endswith('-cloud'):
                base_name = base_name[:-6]
            if base_name.endswith('-default'):
                base_name = base_name[:-8]
            
            patterns = [
                r'^([a-z]+)-([0-9]+(?:\.[0-9]+)*)-([a-z0-9_]+)$',
                r'^([a-z]+)([0-9]+(?:\.[0-9]+)*)-([a-z0-9_]+)$',
                r'^([a-z]+)_([0-9_]+)_([a-z0-9_]+)$',
            ]
            
            for pattern in patterns:
                match = re.match(pattern, base_name, re.IGNORECASE)
                if match:
                    os_name = match.group(1).lower()
                    version = match.group(2).replace('_', '.')
                    arch = match.group(3).lower()
                    
                    arch_mapping = {
                        'x86_64': 'amd64',
                        'aarch64': 'arm64',
                        'armv7l': 'armhf',
                        'i386': '386',
                        'i686': '386'
                    }
                    arch = arch_mapping.get(arch, arch)
                    
                    return os_name, version, arch
            
            print(f"Warning: Could not parse filename {filename}, using defaults")
            return "unknown", "latest", "amd64"
        
        api_url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/releases/tags/{RELEASE_TAG}"
        print(f"Fetching release data from: {api_url}")
        
        try:
            response = requests.get(api_url)
            response.raise_for_status()
            release_data = response.json()
        except Exception as e:
            print(f"Error fetching release data: {e}")
            exit(1)
        
        assets = release_data.get('assets', [])
        print(f"Found {len(assets)} assets in release")
        
        for asset in assets:
            print(f"Asset: {asset['name']} - {asset['browser_download_url']}")
        
        products = {}
        current_time = datetime.now(timezone.utc).strftime("%Y%m%d_%H%M")
        
        for asset in assets:
            filename = asset['name']
            download_url = asset['browser_download_url']
            
            if not any(filename.endswith(ext) for ext in ['.tar.xz', '.tar.gz', '.tar', '.squashfs']):
                continue
                
            print(f"Processing: {filename}")
            
            os_name, version, arch = parse_image_filename(filename)
            file_size = asset.get('size', 0)
            
            print(f"  OS: {os_name}, Version: {version}, Arch: {arch}, Size: {file_size}")
            
            sha256_hash = calculate_sha256_from_url(download_url)
            if not sha256_hash:
                print(f"  Warning: Could not calculate SHA256 for {filename}")
                sha256_hash = ""
            else:
                print(f"  SHA256: {sha256_hash}")
            
            product_id = f"{os_name}:{version}:{arch}"
            
            if product_id not in products:
                products[product_id] = {
                    "aliases": f"{os_name}/{version}/{arch}",
                    "arch": arch,
                    "os": os_name,
                    "release": version,
                    "release_title": f"{os_name.title()} {version}",
                    "versions": {}
                }
            
            file_type = "rootfs.tar.xz"
            if filename.endswith('.squashfs'):
                file_type = "rootfs.squashfs"
            elif filename.endswith('.tar.gz'):
                file_type = "rootfs.tar.gz"
            elif filename.endswith('.tar'):
                file_type = "rootfs.tar"
            
            products[product_id]["versions"][current_time] = {
                "items": {
                    file_type: {
                        "ftype": file_type,
                        "path": download_url,
                        "sha256": sha256_hash,
                        "size": file_size
                    }
                }
            }
        
        print(f"Generated {len(products)} products")
        
        os.makedirs("build/streams/v1", exist_ok=True)
        
        index_data = {
            "index": {
                "images": {
                    "datatype": "image-downloads", 
                    "path": "streams/v1/images.json",
                    "updated": datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%SZ"),
                    "products": list(products.keys()),
                    "format": "products:1.0"
                }
            },
            "updated": datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%SZ"),
            "format": "index:1.0"
        }
        
        with open("build/streams/v1/index.json", "w") as f:
            json.dump(index_data, f, indent=2)
        
        print("Generated index.json")
        
        images_data = {
            "content_id": "images",
            "datatype": "image-downloads",
            "format": "products:1.0", 
            "products": products,
            "updated": datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%SZ")
        }
        
        with open("build/streams/v1/images.json", "w") as f:
            json.dump(images_data, f, indent=2)
        
        print("Generated images.json")
        
        summary = {
            "total_products": len(products),
            "architectures": list(set(p["arch"] for p in products.values())),
            "operating_systems": list(set(p["os"] for p in products.values())),
            "generated_at": datetime.now(timezone.utc).isoformat(),
            "source_release": f"{REPO_OWNER}/{REPO_NAME}/releases/tag/{RELEASE_TAG}"
        }
        
        with open("build/summary.json", "w") as f:
            json.dump(summary, f, indent=2)
        
        print(f"Build summary: {summary}")
        PYTHON_SCRIPT
        
    - name: Generate static HTML index
      run: |
        cat > build/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>LXD Simplestreams Image Server</title>
            <style>
                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 40px; background: #f5f5f5; }
                .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                h1 { color: #333; border-bottom: 3px solid #007acc; padding-bottom: 10px; }
                .info-box { background: #e7f3ff; padding: 20px; border-radius: 6px; margin: 20px 0; border-left: 4px solid #007acc; }
                .endpoint { background: #f8f9fa; padding: 15px; border-radius: 4px; font-family: monospace; margin: 10px 0; border: 1px solid #dee2e6; }
                .usage-example { background: #2d3748; color: #fff; padding: 20px; border-radius: 6px; margin: 20px 0; overflow-x: auto; }
                .usage-example code { color: #68d391; }
                table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                th, td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }
                th { background-color: #f8f9fa; font-weight: 600; }
                tr:hover { background-color: #f8f9fa; }
                .badge { display: inline-block; padding: 4px 8px; border-radius: 12px; font-size: 12px; font-weight: 500; }
                .badge-primary { background: #007acc; color: white; }
                .badge-success { background: #28a745; color: white; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>LXD Simplestreams Image Server</h1>
                
                <div class="info-box">
                    <h3>Server Information</h3>
                    <p>This is an automated LXD Simplestreams image server, providing pre-built container images from the oneclickvirt project.</p>
                    <p><strong>Source:</strong> <a href="https://github.com/oneclickvirt/lxd_images">oneclickvirt/lxd_images</a></p>
                    <p><strong>Updated:</strong> <span id="last-updated">Loading...</span></p>
                </div>
                
                <h2>API Endpoints</h2>
                <div class="endpoint">
                    <strong>Index:</strong> <a href="./streams/v1/index.json">./streams/v1/index.json</a>
                </div>
                <div class="endpoint">
                    <strong>Images:</strong> <a href="./streams/v1/images.json">./streams/v1/images.json</a>
                </div>
                <div class="endpoint">
                    <strong>Summary:</strong> <a href="./summary.json">./summary.json</a>
                </div>
                
                <h2>Usage Examples</h2>
                
                <h3>Add this server as a remote in LXD:</h3>
                <div class="usage-example">
                    <code>lxc remote add oneclickvirt https://YOUR_NETLIFY_URL --protocol=simplestreams --public</code>
                </div>
                
                <h3>List available images:</h3>
                <div class="usage-example">
                    <code>lxc image list oneclickvirt:</code>
                </div>
                
                <h3>Launch a container:</h3>
                <div class="usage-example">
                    <code>lxc launch oneclickvirt:ubuntu/22.04/amd64 my-container</code>
                </div>
                
                <div id="images-table-container">
                    <h2>Available Images</h2>
                    <p>Loading image list...</p>
                </div>
            </div>
            
            <script>
                Promise.all([
                    fetch('./streams/v1/images.json').then(r => r.json()),
                    fetch('./summary.json').then(r => r.json())
                ]).then(([images, summary]) => {
                    document.getElementById('last-updated').textContent = new Date(summary.generated_at).toLocaleString();
                    
                    const products = images.products;
                    const tableHtml = `
                        <table>
                            <thead>
                                <tr>
                                    <th>Operating System</th>
                                    <th>Version</th>
                                    <th>Architecture</th>
                                    <th>Aliases</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${Object.entries(products).map(([id, product]) => `
                                    <tr>
                                        <td><strong>${product.os}</strong></td>
                                        <td>${product.release}</td>
                                        <td><span class="badge badge-primary">${product.arch}</span></td>
                                        <td><code>${product.aliases}</code></td>
                                        <td><span class="badge badge-success">Available</span></td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                        <p><strong>Total Images:</strong> ${Object.keys(products).length}</p>
                        <p><strong>Architectures:</strong> ${summary.architectures.join(', ')}</p>
                        <p><strong>Operating Systems:</strong> ${summary.operating_systems.join(', ')}</p>
                    `;
                    
                    document.getElementById('images-table-container').innerHTML = 
                        '<h2>Available Images</h2>' + tableHtml;
                }).catch(error => {
                    console.error('Error loading image data:', error);
                    document.getElementById('images-table-container').innerHTML = 
                        '<h2>Available Images</h2><p>Error loading image list. Please check the console.</p>';
                });
            </script>
        </body>
        </html>
        EOF
        
    - name: Create _redirects file for Netlify
      run: |
        cat > build/_redirects << 'EOF'
        /streams/v1/* /streams/v1/:splat 200
        /streams/* /streams/:splat 200
        /*.json /:splat 200
        EOF
        
    - name: Create _headers file for Netlify
      run: |
        cat > build/_headers << 'EOF'
        /*.json
          Access-Control-Allow-Origin: *
          Access-Control-Allow-Methods: GET, HEAD, OPTIONS
          Access-Control-Allow-Headers: *
          Content-Type: application/json
          Cache-Control: public, max-age=300
        
        /streams/v1/*
          Access-Control-Allow-Origin: *
          Access-Control-Allow-Methods: GET, HEAD, OPTIONS
          Access-Control-Allow-Headers: *
          Content-Type: application/json
          Cache-Control: public, max-age=300
        
        /*.html
          Cache-Control: public, max-age=60
        EOF
        
    - name: Verify build structure and content
      run: |
        echo "=== Build directory structure ==="
        find build -type f -exec ls -la {} \;
        
        echo -e "\n=== Verifying JSON files ==="
        python3 -m json.tool build/streams/v1/index.json > /dev/null && echo "index.json is valid"
        python3 -m json.tool build/streams/v1/images.json > /dev/null && echo "images.json is valid"
        python3 -m json.tool build/summary.json > /dev/null && echo "summary.json is valid"
        
        echo -e "\n=== Sample content ==="
        echo "--- index.json ---"
        head -20 build/streams/v1/index.json
        echo -e "\n--- images.json (first 30 lines) ---"
        head -30 build/streams/v1/images.json
        
    - name: Deploy to Netlify
      uses: nwtgck/actions-netlify@v3.0
      with:
        publish-dir: './build'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy LXD Simplestreams - $(date)"
        alias: deploy-preview-${{ github.event.number }}
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      id: netlify-deploy
        
    - name: Output deployment information
      run: |
        echo "Deployment completed successfully!"
        echo "Deploy URL: ${{ steps.netlify-deploy.outputs.deploy-url }}"
        echo "Live URL: ${{ steps.netlify-deploy.outputs.live-url }}"
        echo ""
        echo "LXD Configuration:"
        echo "lxc remote add oneclickvirt ${{ steps.netlify-deploy.outputs.live-url }} --protocol=simplestreams --public"
        echo ""
        echo "Usage Examples:"
        echo "lxc image list oneclickvirt:"
        echo "lxc launch oneclickvirt:ubuntu/24.04/amd64 my-container"
        
    - name: Test simplestreams endpoints
      run: |
        echo "Waiting for deployment to be ready..."
        sleep 45
        
        DEPLOY_URL="${{ steps.netlify-deploy.outputs.live-url }}"
        if [ ! -z "$DEPLOY_URL" ]; then
          echo "Testing simplestreams endpoints..."
          
          echo "Testing main page..."
          curl -f -s "$DEPLOY_URL/" > /dev/null && echo "Main page OK" || echo "Main page failed"
          
          echo "Testing index.json..."
          curl -f -s "$DEPLOY_URL/streams/v1/index.json" | python3 -m json.tool > /dev/null && echo "index.json OK" || echo "index.json failed"
          
          echo "Testing images.json..."
          curl -f -s "$DEPLOY_URL/streams/v1/images.json" | python3 -m json.tool > /dev/null && echo "images.json OK" || echo "images.json failed"
          
          echo "Testing summary.json..."
          curl -f -s "$DEPLOY_URL/summary.json" | python3 -m json.tool > /dev/null && echo "summary.json OK" || echo "summary.json failed"
          
          echo "Endpoint testing completed!"
        else
          echo "No deployment URL available for testing"
        fi
