name: Build and Deploy SimpleStreams Index to Netlify

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install requests jinja2 pyyaml
          
      - name: Generate SimpleStreams index with debugging
        run: |
          python3 << 'EOF'
          import requests
          import json
          import hashlib
          import os
          from datetime import datetime, timezone
          
          GITHUB_TOKEN = os.environ.get('GITHUB_TOKEN', '')
          REPO = 'oneclickvirt/lxd_images'
          TAG = 'processed'
          BASE_URL = f'https://github.com/{REPO}/releases/download/{TAG}'
          
          headers = {}
          if GITHUB_TOKEN:
              headers['Authorization'] = f'token {GITHUB_TOKEN}'
              
          response = requests.get(f'https://api.github.com/repos/{REPO}/releases/tags/{TAG}', headers=headers)
          if response.status_code != 200:
              print(f"Error: {response.status_code}")
              exit(1)
              
          release_data = response.json()
          assets = release_data.get('assets', [])
          
          def parse_filename(filename):
              if filename.endswith('-lxd.tar.xz'):
                  base_name = filename.replace('-lxd.tar.xz', '')
              elif filename.endswith('-rootfs.squashfs'):
                  base_name = filename.replace('-rootfs.squashfs', '')
              else:
                  return None, None, None, None
              
              parts = base_name.split('-')
              if len(parts) >= 4:
                  return parts[0], parts[1], parts[2], parts[3]
              return None, None, None, None
          
          def get_placeholder_sha256():
              return hashlib.sha256(b'placeholder').hexdigest()
          
          products = {}
          redirects_rules = []
          
          lxd_files = [asset for asset in assets if asset['name'].endswith('-lxd.tar.xz')]
          rootfs_files = [asset for asset in assets if asset['name'].endswith('-rootfs.squashfs')]
          
          current_time = datetime.now(timezone.utc)
          version_id = current_time.strftime('%Y%m%d_%H%M')
          
          print(f"Processing {len(lxd_files)} LXD files")
          print(f"Current version ID: {version_id}")
          
          # 专门检查debian文件
          debian_files = [f for f in lxd_files if 'debian-11' in f['name']]
          print(f"Found {len(debian_files)} debian-11 files:")
          for f in debian_files:
              print(f"  - {f['name']}")
          
          for lxd_asset in lxd_files:
              distro, version, arch, variant = parse_filename(lxd_asset['name'])
              if not all([distro, version, arch, variant]):
                  print(f"Failed to parse: {lxd_asset['name']}")
                  continue
                  
              rootfs_name = lxd_asset['name'].replace('-lxd.tar.xz', '-rootfs.squashfs')
              rootfs_asset = next((a for a in rootfs_files if a['name'] == rootfs_name), None)
              
              if not rootfs_asset:
                  print(f"Missing rootfs for: {lxd_asset['name']}")
                  continue
              
              # 重定向规则
              redirects_rules.append(f'/download/{lxd_asset["name"]} {BASE_URL}/{lxd_asset["name"]} 302')
              redirects_rules.append(f'/download/{rootfs_asset["name"]} {BASE_URL}/{rootfs_asset["name"]} 302')
              
              product_name = f'{distro}:{version}:{arch}:{variant}'
              
              if product_name not in products:
                  # 生成别名 - 确保包含 debian/11
                  aliases_list = []
                  
                  # 主要别名格式
                  aliases_list.append(f'{distro}/{version}')  # debian/11
                  aliases_list.append(f'{distro}/{version}/{arch}')  # debian/11/amd64
                  
                  # 如果是default变体，不在别名中显示变体
                  if variant == 'default':
                      pass  # 已经包含在上面
                  else:
                      aliases_list.append(f'{distro}/{version}/{arch}/{variant}')
                  
                  # 冒号格式
                  aliases_list.append(f'{distro}:{version}:{arch}')
                  
                  # 转换为逗号分隔的字符串
                  aliases_string = ','.join(aliases_list)
                  
                  products[product_name] = {
                      'aliases': aliases_string,
                      'arch': arch,
                      'os': distro,
                      'release': version,
                      'variant': variant,
                      'versions': {}
                  }
                  
                  if distro == 'debian' and version == '11':
                      print(f"Added Debian 11 product: {product_name}")
                      print(f"  Aliases: {aliases_string}")
                      print(f"  Arch: {arch}, Variant: {variant}")
              
              products[product_name]['versions'][version_id] = {
                  'items': {
                      'lxd.tar.xz': {
                          'ftype': 'lxd.tar.xz',
                          'size': lxd_asset.get('size', 0),
                          'path': f'download/{lxd_asset["name"]}',
                          'sha256': get_placeholder_sha256()
                      },
                      'rootfs.squashfs': {
                          'ftype': 'squashfs',
                          'size': rootfs_asset.get('size', 0),
                          'path': f'download/{rootfs_asset["name"]}',
                          'sha256': get_placeholder_sha256()
                      }
                  }
              }
          
          current_time_str = current_time.strftime('%a, %d %b %Y %H:%M:%S +0000')
          
          # SimpleStreams索引
          index_data = {
              'format': 'index:1.0',
              'index': {
                  'images': {
                      'datatype': 'image-downloads',
                      'path': 'streams/v1/images.json',
                      'updated': current_time_str,
                      'products': list(products.keys()),
                      'format': 'products:1.0'
                  }
              },
              'updated': current_time_str
          }
          
          images_data = {
              'content_id': 'images',
              'datatype': 'image-downloads',
              'format': 'products:1.0',
              'products': products,
              'updated': current_time_str
          }
          
          os.makedirs('build/streams/v1', exist_ok=True)
          
          with open('build/streams/v1/index.json', 'w') as f:
              json.dump(index_data, f, indent=2)
              
          with open('build/streams/v1/images.json', 'w') as f:
              json.dump(images_data, f, indent=2)
          
          # _redirects文件
          with open('build/_redirects', 'w') as f:
              for rule in redirects_rules:
                  f.write(rule + '\n')
              f.write('/* /index.html 200\n')
          
          print(f"Generated {len(products)} products with {len(redirects_rules)} redirects")
          
          # 详细诊断信息
          print("\n=== 最终诊断 ===")
          debian_products = [k for k in products.keys() if 'debian:11:' in k]
          print(f"Debian 11 products generated: {len(debian_products)}")
          for product in debian_products:
              print(f"  - {product}: aliases={products[product]['aliases']}")
          
          # 检查别名是否包含 debian/11
          has_debian_11_alias = False
          for product in products.values():
              if 'debian/11' in product['aliases']:
                  has_debian_11_alias = True
                  break
          
          print(f"Has debian/11 alias: {has_debian_11_alias}")
          
          # 写入调试文件
          with open('build/debug.json', 'w') as f:
              debug_info = {
                  'total_products': len(products),
                  'debian_11_products': debian_products,
                  'version_id': version_id,
                  'has_debian_11_alias': has_debian_11_alias,
                  'sample_product': list(products.items())[0] if products else None
              }
              json.dump(debug_info, f, indent=2)
          
          EOF
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create HTML with debugging
        run: |
          cat > build/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>LXD Images - Debug</title>
              <style>
                  body { font-family: monospace; padding: 20px; }
                  pre { background: #f5f5f5; padding: 10px; }
              </style>
          </head>
          <body>
              <h1>LXD Images Repository - Debug Mode</h1>
              <p><strong>Add remote:</strong> <code>lxc remote add spiritlhl https://lxdimages.spiritlhl.net --protocol simplestreams --public</code></p>
              
              <h2>Links</h2>
              <ul>
                  <li><a href="streams/v1/index.json">Index JSON</a></li>
                  <li><a href="streams/v1/images.json">Images JSON</a></li>
                  <li><a href="debug.json">Debug Info</a></li>
              </ul>
              
              <h2>Test Commands</h2>
              <pre>
          # Check if remote works
          lxc image list spiritlhl:
          
          # Try different formats
          lxc launch spiritlhl:debian/11 test1
          lxc launch spiritlhl:debian/11/amd64 test2
          lxc launch spiritlhl:debian:11:amd64 test3
              </pre>
          </body>
          </html>
          EOF
          
      - name: Create netlify.toml
        run: |
          cat > build/netlify.toml << 'EOF'
          [build]
            publish = "."
          
          [[headers]]
            for = "/streams/v1/*"
            [headers.values]
              Content-Type = "application/json"
              Cache-Control = "max-age=60"
              Access-Control-Allow-Origin = "*"
          
          [[headers]]
            for = "/debug.json"
            [headers.values]
              Content-Type = "application/json"
          EOF

      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: './build'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
