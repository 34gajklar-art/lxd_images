name: Build and Deploy SimpleStreams Index to Netlify

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install requests jinja2 pyyaml

      - name: Generate SimpleStreams JSON
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python3 << 'EOF'
          import os, json, hashlib
          import requests
          from datetime import datetime, timezone

          # Configuration
          REPO = 'oneclickvirt/lxd_images'
          TAG = 'processed'
          BASE_URL = f'https://github.com/{REPO}/releases/download/{TAG}'
          headers = {}
          token = os.getenv('GITHUB_TOKEN')
          if token:
              headers['Authorization'] = f'token {token}'

          # Fetch release assets
          resp = requests.get(f'https://api.github.com/repos/{REPO}/releases/tags/{TAG}', headers=headers)
          resp.raise_for_status()
          assets = resp.json().get('assets', [])

          # Helpers
          def parse_name(name):
              # expect distro-version-arch-variant-lxd.tar.xz
              parts = name.rsplit('-', 4)
              if len(parts) == 5 and parts[-1] == 'lxd.tar.xz':
                  distro, version, arch, variant, _ = parts
                  return distro, version, arch, variant
              return (None,)*4

          def sha256_placeholder():
              return hashlib.sha256(b'placeholder').hexdigest()

          # Collect assets
          lxd_assets = [a for a in assets if a['name'].endswith('lxd.tar.xz')]
          rootfs_assets = {a['name'].replace('-rootfs.squashfs',''): a for a in assets if a['name'].endswith('rootfs.squashfs')}

          # Build products
          now = datetime.now(timezone.utc)
          ts = now.strftime('%a, %d %b %Y %H:%M:%S +0000')
          version_id = now.strftime('%Y%m%d')
          products = {}
          redirects = []

          for l in lxd_assets:
              distro, release, arch, variant = parse_name(l['name'])
              if not distro:
                  continue
              key = f"{distro}:{release}:{arch}" + (f":{variant}" if variant != 'default' else '')
              # find matching rootfs
              root_key = l['name'].replace('-lxd.tar.xz','')
              rf = rootfs_assets.get(root_key)
              if not rf:
                  continue

              # redirects
              redirects.append(f"/download/{l['name']} {BASE_URL}/{l['name']} 302")
              redirects.append(f"/download/{rf['name']} {BASE_URL}/{rf['name']} 302")

              # aliases array
              a = []
              # base alias distro/release
              a.append(f"{distro}/{release}")
              # arch
              a.append(f"{distro}/{release}/{arch}")
              # variant if not default
              if variant and variant != 'default':
                  a.append(f"{distro}/{release}/{variant}")
                  a.append(f"{distro}/{release}/{arch}/{variant}")
              # dedupe
              aliases = sorted(set(a))

              # init product
              if key not in products:
                  products[key] = {
                      "aliases": aliases,
                      "os": distro,
                      "arch": arch,
                      "release": release,
                      "versions": {}
                  }
                  if variant and variant != 'default':
                      products[key]["variant"] = variant

              # items
              items = {
                  "lxd.tar.xz": {
                      "path": f"download/{l['name']}",
                      "size": l.get('size', 0),
                      "sha256": sha256_placeholder()
                  },
                  "rootfs.squashfs": {
                      "path": f"download/{rf['name']}",
                      "size": rf.get('size', 0),
                      "sha256": sha256_placeholder()
                  }
              }

              products[key]["versions"][version_id] = {"items": items}

          # build JSON structures
          index_json = {
            "format": "index:1.0",
            "updated": ts,
            "index": {
              "images": {
                "datatype": "image-downloads",
                "format": "products:1.0",
                "path": "streams/v1/images.json",
                "updated": ts
              }
            }
          }
          images_json = {
            "content_id": "images",
            "datatype": "image-downloads",
            "format": "products:1.0",
            "license": "http://www.canonical.com/intellectual-property-policy",
            "updated": ts,
            "products": products
          }

          # write files
          os.makedirs('build/streams/v1', exist_ok=True)
          with open('build/streams/v1/index.json','w') as f:
              json.dump(index_json, f, indent=2)
          with open('build/streams/v1/images.json','w') as f:
              json.dump(images_json, f, indent=2)
          with open('build/_redirects','w') as f:
              for r in redirects:
                  f.write(r + "\n")
              f.write("/* /index.html 200\n")

          print("Generated", len(products), "products")
          EOF

      - name: Create HTML landing page
        run: |
          cat > build/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <title>LXD Images – SimpleStreams</title>
          </head>
          <body>
            <h1>LXD SimpleStreams Mirror</h1>
            <p>使用以下命令添加镜像源：</p>
            <pre>lxc remote add spiritlhl https://lxdimages.spiritlhl.net --protocol simplestreams --public</pre>
            <h2>示例</h2>
            <pre>
          # 列出镜像
          lxc image list spiritlhl:

          # 启动容器
          lxc launch spiritlhl:debian/11 my-debian
            </pre>
            <ul>
              <li><a href="streams/v1/index.json">streams/v1/index.json</a></li>
              <li><a href="streams/v1/images.json">streams/v1/images.json</a></li>
            </ul>
          </body>
          </html>
          EOF

      - name: Create Netlify config
        run: |
          cat > build/netlify.toml << 'EOF'
          [build]
            publish = "."

          [[headers]]
            for = "/streams/v1/*"
            [headers.values]
              Content-Type = "application/json; charset=utf-8"
              Cache-Control = "public, max-age=300"
              Access-Control-Allow-Origin = "*"
              Access-Control-Allow-Methods = "GET, HEAD, OPTIONS"
          EOF

      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: './build'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
