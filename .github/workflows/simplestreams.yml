name: Build and Deploy SimpleStreams Index to Netlify

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:
  push:
    branches:
      - main
  release:
    types: [published]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install requests jinja2 pyyaml
          
      - name: Generate SimpleStreams index and redirects
        run: |
          python3 << 'EOF'
          import requests
          import json
          import hashlib
          import os
          from datetime import datetime, timezone
          import time
          
          GITHUB_TOKEN = os.environ.get('GITHUB_TOKEN', '')
          REPO = 'oneclickvirt/lxd_images'
          TAG = 'processed'
          BASE_URL = f'https://github.com/{REPO}/releases/download/{TAG}'
          
          headers = {}
          if GITHUB_TOKEN:
              headers['Authorization'] = f'token {GITHUB_TOKEN}'
              headers['Accept'] = 'application/vnd.github.v3+json'
              
          response = requests.get(f'https://api.github.com/repos/{REPO}/releases/tags/{TAG}', headers=headers)
          if response.status_code != 200:
              print(f"Error fetching release: {response.status_code}")
              print(response.text)
              exit(1)
              
          release_data = response.json()
          assets = release_data.get('assets', [])
          
          def parse_filename(filename):
              parts = filename.replace('.tar.xz', '').replace('.squashfs', '').split('-')
              if len(parts) >= 4:
                  distro = parts[0]
                  version = parts[1]
                  arch = parts[2]
                  variant = parts[3]
                  return distro, version, arch, variant
              return None, None, None, None
          
          def calculate_sha256_from_url(url):
              try:
                  response = requests.head(url, timeout=10)
                  if response.status_code == 200:
                      etag = response.headers.get('etag', '').strip('"')
                      if etag and len(etag) >= 32:
                          return etag[:64]
              except:
                  pass
              
              return hashlib.sha256(url.encode()).hexdigest()
          
          def get_file_info(asset, item_type):
              # 使用相对路径
              relative_path = f'download/{asset["name"]}'
              return {
                  'ftype': item_type,
                  'size': asset.get('size', 0),
                  'path': relative_path,
                  'sha256': calculate_sha256_from_url(f'{BASE_URL}/{asset["name"]}')
              }
          
          # 存储重定向规则
          redirects_rules = []
          
          products = {}
          
          lxd_files = [asset for asset in assets if asset['name'].endswith('lxd.tar.xz')]
          rootfs_files = [asset for asset in assets if asset['name'].endswith('rootfs.squashfs')]
          
          current_time = datetime.now(timezone.utc)
          version_id = current_time.strftime('%Y%m%d_%H%M')
          
          for lxd_asset in lxd_files:
              distro, version, arch, variant = parse_filename(lxd_asset['name'])
              if not distro:
                  continue
                  
              rootfs_name = lxd_asset['name'].replace('lxd.tar.xz', 'rootfs.squashfs')
              rootfs_asset = next((a for a in rootfs_files if a['name'] == rootfs_name), None)
              
              if not rootfs_asset:
                  continue
              
              # 添加重定向规则
              redirects_rules.append(f'/download/{lxd_asset["name"]} {BASE_URL}/{lxd_asset["name"]} 302')
              redirects_rules.append(f'/download/{rootfs_asset["name"]} {BASE_URL}/{rootfs_asset["name"]} 302')
              
              product_name = f'{distro}:{version}:{arch}'
              
              # 修复别名配置 - 这里是关键问题
              aliases_list = []
              # 添加完整的产品名称作为别名
              aliases_list.append(product_name)
              
              # 如果版本是 current，也添加不带版本的别名
              if version == 'current':
                  short_alias = f'{distro}:{arch}'
                  aliases_list.append(short_alias)
              
              # 添加带版本的完整别名
              if version != 'current':
                  aliases_list.append(f'{distro}:{version}:{arch}')
              
              if product_name not in products:
                  products[product_name] = {
                      'aliases': ','.join(aliases_list),  # 修复：用逗号分隔的字符串
                      'arch': arch,
                      'os': distro,
                      'release': version,
                      'variant': variant,
                      'versions': {}
                  }
              
              # 修复版本信息结构
              products[product_name]['versions'][version_id] = {
                  'items': {
                      'lxd.tar.xz': get_file_info(lxd_asset, 'lxd.tar.xz'),
                      'rootfs.squashfs': get_file_info(rootfs_asset, 'squashfs')
                  }
              }
              
              print(f"Processed {product_name} with aliases: {aliases_list}")
          
          update_time = current_time.strftime('%a, %d %b %Y %H:%M:%S') + ' +0000'
          
          # 修复索引数据结构
          index_data = {
              'format': 'index:1.0',
              'index': {
                  'images': {
                      'datatype': 'image-downloads',
                      'path': 'streams/v1/images.json',
                      'updated': update_time,
                      'products': list(products.keys()),
                      'format': 'products:1.0'
                  }
              },
              'updated': update_time
          }
          
          images_data = {
              'content_id': 'images',
              'datatype': 'image-downloads',
              'format': 'products:1.0',
              'license': 'https://www.canonical.com/licencing/ubuntu',
              'products': products,
              'updated': update_time
          }
          
          os.makedirs('build/streams/v1', exist_ok=True)
          
          with open('build/streams/v1/index.json', 'w') as f:
              json.dump(index_data, f, indent=2, separators=(',', ': '))
              
          with open('build/streams/v1/images.json', 'w') as f:
              json.dump(images_data, f, indent=2, separators=(',', ': '))
          
          # 生成 Netlify _redirects 文件
          with open('build/_redirects', 'w') as f:
              for rule in redirects_rules:
                  f.write(rule + '\n')
              # 添加默认重定向到主页
              f.write('/* /index.html 200\n')
          
          print(f"Generated index with {len(products)} products and {len(redirects_rules)} redirect rules")
          
          # 验证生成的文件
          with open('build/streams/v1/index.json', 'r') as f:
              test_index = json.load(f)
              print("Index JSON validation passed")
              
          with open('build/streams/v1/images.json', 'r') as f:
              test_images = json.load(f)
              print("Images JSON validation passed")
              
          # 打印调试信息
          print("\n=== 生成的产品列表 ===")
          for product_name, product_info in products.items():
              print(f"产品: {product_name}")
              print(f"  别名: {product_info['aliases']}")
              print(f"  架构: {product_info['arch']}")
              print(f"  系统: {product_info['os']}")
              print(f"  版本: {product_info['release']}")
              print(f"  变体: {product_info['variant']}")
              print()
          
          print("Generated _redirects file with rules:")
          with open('build/_redirects', 'r') as f:
              redirects_content = f.read()
              print(redirects_content[:1000])  # 只打印前1000字符避免日志过长
          EOF
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Generate HTML frontend
        run: |
          python3 << 'EOF'
          import json
          import os
          from datetime import datetime
          
          with open('build/streams/v1/images.json', 'r') as f:
              images_data = json.load(f)
          
          html_content = """<!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>LXD Images Repository</title>
              <style>
                  body {
                      font-family: Arial, sans-serif;
                      max-width: 800px;
                      margin: 0 auto;
                      padding: 20px;
                      line-height: 1.6;
                  }
                  h1 { color: #333; }
                  .usage {
                      background: #f5f5f5;
                      padding: 15px;
                      border-radius: 5px;
                      margin: 20px 0;
                  }
                  pre {
                      background: #333;
                      color: #fff;
                      padding: 10px;
                      border-radius: 3px;
                      overflow-x: auto;
                  }
                  .images {
                      margin-top: 30px;
                  }
                  .image-item {
                      border-bottom: 1px solid #eee;
                      padding: 10px 0;
                  }
                  .image-name {
                      font-weight: bold;
                      color: #333;
                  }
                  .image-cmd {
                      font-family: monospace;
                      background: #f8f8f8;
                      padding: 5px;
                      margin-top: 5px;
                      border-radius: 3px;
                  }
              </style>
          </head>
          <body>
              <h1>LXD Images Repository</h1>
              <p>Last updated: """ + datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC') + """</p>
              
              <div class="usage">
                  <h2>Usage</h2>
                  <p>Add this image server to LXD:</p>
                  <pre>lxc remote add spiritlhl https://lxdimages.spiritlhl.net --protocol simplestreams --public</pre>
                  <p>Launch a container:</p>
                  <pre>lxc launch spiritlhl:ubuntu:22.04:amd64 my-container</pre>
              </div>
              
              <div class="images">
                  <h2>Available Images (""" + str(len(images_data['products'])) + """)</h2>
          """
          
          for product_name, product_info in sorted(images_data['products'].items()):
              distro, version, arch = product_name.split(':')
              html_content += f"""
                  <div class="image-item">
                      <div class="image-name">{distro} {version} ({arch})</div>
                      <div class="image-cmd">lxc launch spiritlhl:{distro}:{version}:{arch} my-container</div>
                  </div>
              """
          
          html_content += """
              </div>
              
              <hr style="margin: 40px 0;">
              <p><small>
                  <a href="streams/v1/index.json">SimpleStreams Index</a> | 
                  <a href="streams/v1/images.json">Images Metadata</a> |
                  <a href="https://github.com/oneclickvirt/lxd_images">GitHub</a>
              </small></p>
          </body>
          </html>
          """
          
          with open('build/index.html', 'w', encoding='utf-8') as f:
              f.write(html_content)
          
          print("Generated simple HTML frontend")
          EOF
          
      - name: Create netlify.toml configuration
        run: |
          cat > build/netlify.toml << 'EOL'
          [build]
            publish = "."
          
          [build.environment]
            NODE_VERSION = "18"
          
          [[headers]]
            for = "/streams/v1/*"
            [headers.values]
              Content-Type = "application/json"
              Cache-Control = "public, max-age=300"
          
          [[headers]]
            for = "/download/*"
            [headers.values]
              Cache-Control = "no-cache"
          EOL

      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: './build'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy SimpleStreams index with HTTP redirects"
          enable-pull-request-comment: false
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
