name: Multi-Distro Images Build

on:
  schedule:
    - cron: "0 4 * * *"
  workflow_dispatch:

jobs:
  build-images:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      max-parallel: 6
      matrix:
        distro:
          [
            "debian",
            "kali",
            "almalinux",
            "rockylinux",
            "fedora",
            "opensuse",
            "alpine",
            "archlinux",
            "gentoo",
            "oracle",
            "openeuler",
            "ubuntu",
          ]
        # distro: ["openwrt", "centos"]
        arch:
          - name: amd64
            runner: ubuntu-latest
          - name: arm64
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.arch.runner }}
    timeout-minutes: 120

    steps:
      - uses: actions/checkout@v4

      - name: Check workspace
        run: pwd

      - name: Build environment
        run: |
          sudo apt update -y
          sudo apt install -y polkit || sudo apt install -y policykit-1
          sudo apt install -y jq

      - name: Configure Git Identity
        run: |
          git config --global user.name "daily-update"
          git config --global user.email "tg@spiritlhl.top"

      - name: Build and Upload Images
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set +e  # 禁止错误退出
          # set -eo pipefail
          DISTRO="${{ matrix.distro }}"
          ARCH="${{ matrix.arch.name }}"
          echo "Processing $DISTRO for $ARCH architecture"
          output=$(bash build_images.sh $DISTRO false $ARCH | tail -n 1)
          zip_name_list=($output)  # 让shell自动按空格分割
          echo "---zip_name_list---"
          for item in "${zip_name_list[@]}"; do
            echo "$item"
          done
          echo "-------"
          # 将仓库地址指向当前 fork（Action 环境默认提供 $GITHUB_REPOSITORY）
          REPO="${GITHUB_REPOSITORY:-34gajklar-art/lxd_images}"
          echo "Using repository: $REPO"
          # 获取或创建 Release（不再请求原作者仓库）
          release_response=$(curl -sS -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${REPO}/releases/tags/$DISTRO" || true)
          if [ "$(jq -r '.id' <<< "$release_response")" == "null" ]; then
            echo "Creating new release for $DISTRO in $REPO"
            release_response=$(curl -sS -X POST -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              -d '{"tag_name":"'"$DISTRO"'", "name":"'"$DISTRO Images"'", "generate_release_notes":true}' \
              "https://api.github.com/repos/${REPO}/releases" || true)
          fi
          release_id=$(jq -r '.id' <<< "$release_response")
          # 执行实际构建
          echo "Building $DISTRO and packaging zips for $ARCH"
          sudo bash build_images.sh $DISTRO true $ARCH || true
          echo "------------"
          pwd
          du -sh *
          echo "------------"
          # 处理构建产物
          for file in "${zip_name_list[@]}"; do
            if [ -f "$file" ] && [ $(stat -c %s "$file") -gt 10485760 ]; then
              echo "Processing $file (size: $(numfmt --to=iec-i --suffix=B $(stat -c %s "$file")))"
              asset_name=$(basename "$file")
              # 删除当前 fork Release 上的旧资产，避免残留原仓库文件
              gh release delete-asset "$DISTRO" "$asset_name" --yes --repo "$REPO" || true
              # 上传新资产到 fork 对应的 Release
              echo "Uploading $asset_name to $REPO..."
              gh release upload "$DISTRO" "$file" --repo "$REPO" || true
              sudo rm -vf "$file"
            else
              echo "Skipping $file - does not exist or size <10MB"
              [ -f "$file" ] && rm -vf "$file"
            fi
          done
        continue-on-error: true
